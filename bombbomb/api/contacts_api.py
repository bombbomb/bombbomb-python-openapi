# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.  # noqa: E501

    OpenAPI spec version: 2.0.831
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bombbomb.api_client import ApiClient


class ContactsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_contacts_csv(self, mapping_data, list_data, **kwargs):  # noqa: E501
        """Add contacts from a CSV file.  # noqa: E501

        Add multiple contacts through the upload importer from a CSV file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_contacts_csv(mapping_data, list_data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mapping_data: The info sent for the contacts (required)
        :param str list_data: The info sent with the import for the list (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_contacts_csv_with_http_info(mapping_data, list_data, **kwargs)  # noqa: E501
        else:
            (data) = self.add_contacts_csv_with_http_info(mapping_data, list_data, **kwargs)  # noqa: E501
            return data

    def add_contacts_csv_with_http_info(self, mapping_data, list_data, **kwargs):  # noqa: E501
        """Add contacts from a CSV file.  # noqa: E501

        Add multiple contacts through the upload importer from a CSV file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_contacts_csv_with_http_info(mapping_data, list_data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mapping_data: The info sent for the contacts (required)
        :param str list_data: The info sent with the import for the list (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mapping_data', 'list_data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_contacts_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mapping_data' is set
        if ('mapping_data' not in params or
                params['mapping_data'] is None):
            raise ValueError("Missing the required parameter `mapping_data` when calling `add_contacts_csv`")  # noqa: E501
        # verify the required parameter 'list_data' is set
        if ('list_data' not in params or
                params['list_data'] is None):
            raise ValueError("Missing the required parameter `list_data` when calling `add_contacts_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'mapping_data' in params:
            form_params.append(('mappingData', params['mapping_data']))  # noqa: E501
        if 'list_data' in params:
            form_params.append(('listData', params['list_data']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/contacts/import_csv', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_new_contact(self, contact_email, **kwargs):  # noqa: E501
        """Add a contact.  # noqa: E501

        Add a contact to the users list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_new_contact(contact_email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str contact_email: Email of the new contact we are adding (required)
        :param str contact_info: The info sent for this contact
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_new_contact_with_http_info(contact_email, **kwargs)  # noqa: E501
        else:
            (data) = self.add_new_contact_with_http_info(contact_email, **kwargs)  # noqa: E501
            return data

    def add_new_contact_with_http_info(self, contact_email, **kwargs):  # noqa: E501
        """Add a contact.  # noqa: E501

        Add a contact to the users list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_new_contact_with_http_info(contact_email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str contact_email: Email of the new contact we are adding (required)
        :param str contact_info: The info sent for this contact
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contact_email', 'contact_info']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_new_contact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contact_email' is set
        if ('contact_email' not in params or
                params['contact_email'] is None):
            raise ValueError("Missing the required parameter `contact_email` when calling `add_new_contact`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'contact_email' in params:
            form_params.append(('contactEmail', params['contact_email']))  # noqa: E501
        if 'contact_info' in params:
            form_params.append(('contactInfo', params['contact_info']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/contacts/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_new_custom_field(self, field_name, **kwargs):  # noqa: E501
        """Add custom fields.  # noqa: E501

        Add a new custom field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_new_custom_field(field_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str field_name: Custom field name to be added (required)
        :param str field_type: Custom field type for the field to be added
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_new_custom_field_with_http_info(field_name, **kwargs)  # noqa: E501
        else:
            (data) = self.add_new_custom_field_with_http_info(field_name, **kwargs)  # noqa: E501
            return data

    def add_new_custom_field_with_http_info(self, field_name, **kwargs):  # noqa: E501
        """Add custom fields.  # noqa: E501

        Add a new custom field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_new_custom_field_with_http_info(field_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str field_name: Custom field name to be added (required)
        :param str field_type: Custom field type for the field to be added
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field_name', 'field_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_new_custom_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `add_new_custom_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'field_name' in params:
            form_params.append(('fieldName', params['field_name']))  # noqa: E501
        if 'field_type' in params:
            form_params.append(('fieldType', params['field_type']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/contacts/custom_fields/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_pasted_contacts(self, contact_emails, **kwargs):  # noqa: E501
        """Add pasted contacts.  # noqa: E501

        Add the pasted contacts to the users list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_pasted_contacts(contact_emails, async=True)
        >>> result = thread.get()

        :param async bool
        :param str contact_emails: Emails array of the new contacts we are adding (required)
        :param str list_info: Information about the lists id, recalculations on totals, consent etc
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_pasted_contacts_with_http_info(contact_emails, **kwargs)  # noqa: E501
        else:
            (data) = self.add_pasted_contacts_with_http_info(contact_emails, **kwargs)  # noqa: E501
            return data

    def add_pasted_contacts_with_http_info(self, contact_emails, **kwargs):  # noqa: E501
        """Add pasted contacts.  # noqa: E501

        Add the pasted contacts to the users list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_pasted_contacts_with_http_info(contact_emails, async=True)
        >>> result = thread.get()

        :param async bool
        :param str contact_emails: Emails array of the new contacts we are adding (required)
        :param str list_info: Information about the lists id, recalculations on totals, consent etc
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contact_emails', 'list_info']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_pasted_contacts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contact_emails' is set
        if ('contact_emails' not in params or
                params['contact_emails'] is None):
            raise ValueError("Missing the required parameter `contact_emails` when calling `add_pasted_contacts`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'contact_emails' in params:
            form_params.append(('contactEmails', params['contact_emails']))  # noqa: E501
        if 'list_info' in params:
            form_params.append(('listInfo', params['list_info']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/contacts/paste', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def c_sv_to_object(self, file, **kwargs):  # noqa: E501
        """Format CSV.  # noqa: E501

        Format a CSV file to an object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.c_sv_to_object(file, async=True)
        >>> result = thread.get()

        :param async bool
        :param str file: The CSV file being uploaded (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.c_sv_to_object_with_http_info(file, **kwargs)  # noqa: E501
        else:
            (data) = self.c_sv_to_object_with_http_info(file, **kwargs)  # noqa: E501
            return data

    def c_sv_to_object_with_http_info(self, file, **kwargs):  # noqa: E501
        """Format CSV.  # noqa: E501

        Format a CSV file to an object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.c_sv_to_object_with_http_info(file, async=True)
        >>> result = thread.get()

        :param async bool
        :param str file: The CSV file being uploaded (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method c_sv_to_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `c_sv_to_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            form_params.append(('file', params['file']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/csv-to-object', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_contacts(self, **kwargs):  # noqa: E501
        """Delete Contacts  # noqa: E501

        Delete all contacts within a list, or provide a comma separated list of contactIds to delete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_contacts(async=True)
        >>> result = thread.get()

        :param async bool
        :param str list_id: The list of contacts to be deleted.
        :param str contact_ids: comma separated list of contact ids to delete
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_contacts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_contacts_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_contacts_with_http_info(self, **kwargs):  # noqa: E501
        """Delete Contacts  # noqa: E501

        Delete all contacts within a list, or provide a comma separated list of contactIds to delete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_contacts_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str list_id: The list of contacts to be deleted.
        :param str contact_ids: comma separated list of contact ids to delete
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'contact_ids']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_contacts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'list_id' in params:
            form_params.append(('listId', params['list_id']))  # noqa: E501
        if 'contact_ids' in params:
            form_params.append(('contactIds', params['contact_ids']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/contacts/delete', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_contact_by_id(self, id, **kwargs):  # noqa: E501
        """Get Contact Details  # noqa: E501

        Get the contact details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_contact_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Guid for the contact. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_contact_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_contact_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_contact_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Contact Details  # noqa: E501

        Get the contact details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_contact_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Guid for the contact. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_contact_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_contact_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/contact/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_custom_fields(self, **kwargs):  # noqa: E501
        """Get custom fields.  # noqa: E501

        Get the current users custom fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_custom_fields(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_custom_fields_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_custom_fields_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_custom_fields_with_http_info(self, **kwargs):  # noqa: E501
        """Get custom fields.  # noqa: E501

        Get the current users custom fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_custom_fields_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_custom_fields" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/contacts/custom_fields/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
