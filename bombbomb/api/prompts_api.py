# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.  # noqa: E501

    OpenAPI spec version: 2.0.831
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bombbomb.api_client import ApiClient


class PromptsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_prompt_bot(self, email_id, name, subject, content, contact_field_value_column, bot_type_id, template_id, **kwargs):  # noqa: E501
        """Create a running Prompt Bot for a list  # noqa: E501

        Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_prompt_bot(email_id, name, subject, content, contact_field_value_column, bot_type_id, template_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email_id: The default email to use. (required)
        :param str name: The name of the bot. (required)
        :param str subject: The subject of the default email. (required)
        :param str content: The content used in the email. (required)
        :param str contact_field_value_column: The custom field value column with dates for this bot. (required)
        :param str bot_type_id: The type of bot to create. (required)
        :param str template_id: The template used to create the email id. (required)
        :param str list_id: The list id to attach the bot to.
        :param str video_id: The video used in the email.
        :param str end_date: The time frame to complete sending to the list.
        :return: PromptBot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_prompt_bot_with_http_info(email_id, name, subject, content, contact_field_value_column, bot_type_id, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_prompt_bot_with_http_info(email_id, name, subject, content, contact_field_value_column, bot_type_id, template_id, **kwargs)  # noqa: E501
            return data

    def create_prompt_bot_with_http_info(self, email_id, name, subject, content, contact_field_value_column, bot_type_id, template_id, **kwargs):  # noqa: E501
        """Create a running Prompt Bot for a list  # noqa: E501

        Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_prompt_bot_with_http_info(email_id, name, subject, content, contact_field_value_column, bot_type_id, template_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email_id: The default email to use. (required)
        :param str name: The name of the bot. (required)
        :param str subject: The subject of the default email. (required)
        :param str content: The content used in the email. (required)
        :param str contact_field_value_column: The custom field value column with dates for this bot. (required)
        :param str bot_type_id: The type of bot to create. (required)
        :param str template_id: The template used to create the email id. (required)
        :param str list_id: The list id to attach the bot to.
        :param str video_id: The video used in the email.
        :param str end_date: The time frame to complete sending to the list.
        :return: PromptBot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email_id', 'name', 'subject', 'content', 'contact_field_value_column', 'bot_type_id', 'template_id', 'list_id', 'video_id', 'end_date']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_prompt_bot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email_id' is set
        if ('email_id' not in params or
                params['email_id'] is None):
            raise ValueError("Missing the required parameter `email_id` when calling `create_prompt_bot`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_prompt_bot`")  # noqa: E501
        # verify the required parameter 'subject' is set
        if ('subject' not in params or
                params['subject'] is None):
            raise ValueError("Missing the required parameter `subject` when calling `create_prompt_bot`")  # noqa: E501
        # verify the required parameter 'content' is set
        if ('content' not in params or
                params['content'] is None):
            raise ValueError("Missing the required parameter `content` when calling `create_prompt_bot`")  # noqa: E501
        # verify the required parameter 'contact_field_value_column' is set
        if ('contact_field_value_column' not in params or
                params['contact_field_value_column'] is None):
            raise ValueError("Missing the required parameter `contact_field_value_column` when calling `create_prompt_bot`")  # noqa: E501
        # verify the required parameter 'bot_type_id' is set
        if ('bot_type_id' not in params or
                params['bot_type_id'] is None):
            raise ValueError("Missing the required parameter `bot_type_id` when calling `create_prompt_bot`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `create_prompt_bot`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'list_id' in params:
            form_params.append(('listId', params['list_id']))  # noqa: E501
        if 'email_id' in params:
            form_params.append(('emailId', params['email_id']))  # noqa: E501
        if 'video_id' in params:
            form_params.append(('videoId', params['video_id']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'subject' in params:
            form_params.append(('subject', params['subject']))  # noqa: E501
        if 'content' in params:
            form_params.append(('content', params['content']))  # noqa: E501
        if 'contact_field_value_column' in params:
            form_params.append(('contactFieldValueColumn', params['contact_field_value_column']))  # noqa: E501
        if 'end_date' in params:
            form_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'bot_type_id' in params:
            form_params.append(('botTypeId', params['bot_type_id']))  # noqa: E501
        if 'template_id' in params:
            form_params.append(('templateId', params['template_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/prompts/bots', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PromptBot',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_video_email_prompt(self, prompt, **kwargs):  # noqa: E501
        """Prompts user to send a video  # noqa: E501

        Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_video_email_prompt(prompt, async=True)
        >>> result = thread.get()

        :param async bool
        :param VideoEmailPrompt prompt: The Video Email Prompt to be created (required)
        :return: VideoEmailPrompt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_video_email_prompt_with_http_info(prompt, **kwargs)  # noqa: E501
        else:
            (data) = self.create_video_email_prompt_with_http_info(prompt, **kwargs)  # noqa: E501
            return data

    def create_video_email_prompt_with_http_info(self, prompt, **kwargs):  # noqa: E501
        """Prompts user to send a video  # noqa: E501

        Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_video_email_prompt_with_http_info(prompt, async=True)
        >>> result = thread.get()

        :param async bool
        :param VideoEmailPrompt prompt: The Video Email Prompt to be created (required)
        :return: VideoEmailPrompt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prompt']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_video_email_prompt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prompt' is set
        if ('prompt' not in params or
                params['prompt'] is None):
            raise ValueError("Missing the required parameter `prompt` when calling `create_video_email_prompt`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'prompt' in params:
            body_params = params['prompt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/prompt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VideoEmailPrompt',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alternate_campaign_content(self, client_group_id, **kwargs):  # noqa: E501
        """List alternate campaign content  # noqa: E501

        Returns a list of alternate campaign content by campaign id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_alternate_campaign_content(client_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_group_id: Id for the campaign (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_alternate_campaign_content_with_http_info(client_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_alternate_campaign_content_with_http_info(client_group_id, **kwargs)  # noqa: E501
            return data

    def get_alternate_campaign_content_with_http_info(self, client_group_id, **kwargs):  # noqa: E501
        """List alternate campaign content  # noqa: E501

        Returns a list of alternate campaign content by campaign id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_alternate_campaign_content_with_http_info(client_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_group_id: Id for the campaign (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_group_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alternate_campaign_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_group_id' is set
        if ('client_group_id' not in params or
                params['client_group_id'] is None):
            raise ValueError("Missing the required parameter `client_group_id` when calling `get_alternate_campaign_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_group_id' in params:
            query_params.append(('clientGroupId', params['client_group_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/campaign/{campaignId}/content/alternate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pending_video_email_prompts(self, **kwargs):  # noqa: E501
        """List pending prompts  # noqa: E501

        Returns a list of prompts that have not been sent yet, and can still be customized.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_pending_video_email_prompts(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[VideoEmailPrompt]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_pending_video_email_prompts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_pending_video_email_prompts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_pending_video_email_prompts_with_http_info(self, **kwargs):  # noqa: E501
        """List pending prompts  # noqa: E501

        Returns a list of prompts that have not been sent yet, and can still be customized.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_pending_video_email_prompts_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[VideoEmailPrompt]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pending_video_email_prompts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/prompt/pending', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VideoEmailPrompt]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_prompt_bots(self, **kwargs):  # noqa: E501
        """List Prompt Bots  # noqa: E501

        Returns a list of all Prompt Bots for the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_prompt_bots(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[PromptBot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_prompt_bots_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_prompt_bots_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_prompt_bots_with_http_info(self, **kwargs):  # noqa: E501
        """List Prompt Bots  # noqa: E501

        Returns a list of all Prompt Bots for the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_prompt_bots_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[PromptBot]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_prompt_bots" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/prompts/bots', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PromptBot]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_prompt_campaigns(self, **kwargs):  # noqa: E501
        """List Prompt Campaigns  # noqa: E501

        Returns a list of all Prompt Campaigns for the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_prompt_campaigns(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_prompt_campaigns_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_prompt_campaigns_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_prompt_campaigns_with_http_info(self, **kwargs):  # noqa: E501
        """List Prompt Campaigns  # noqa: E501

        Returns a list of all Prompt Campaigns for the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_prompt_campaigns_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_prompt_campaigns" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/prompts/{userId}/campaigns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_email_prompt(self, id, **kwargs):  # noqa: E501
        """Gets a prompt  # noqa: E501

        Gets a prompt  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_video_email_prompt(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The Id of the prompt (required)
        :return: VideoEmailPrompt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_video_email_prompt_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_video_email_prompt_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_video_email_prompt_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets a prompt  # noqa: E501

        Gets a prompt  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_video_email_prompt_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The Id of the prompt (required)
        :return: VideoEmailPrompt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_email_prompt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_video_email_prompt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/prompt/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VideoEmailPrompt',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_email_prompts(self, **kwargs):  # noqa: E501
        """List prompts  # noqa: E501

        Returns a list of all prompts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_video_email_prompts(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[VideoEmailPrompt]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_video_email_prompts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_video_email_prompts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_video_email_prompts_with_http_info(self, **kwargs):  # noqa: E501
        """List prompts  # noqa: E501

        Returns a list of all prompts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_video_email_prompts_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[VideoEmailPrompt]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_email_prompts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/prompt/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VideoEmailPrompt]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def respond_to_video_email_prompt(self, id, choice, **kwargs):  # noqa: E501
        """Respond to a prompt  # noqa: E501

        Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.respond_to_video_email_prompt(id, choice, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the prompt. (required)
        :param str choice: The users' selection. Can be: WithVideo, WithEmail, Cancel, Restore, Reset, Manual (required)
        :param str video_id: The id of the video.
        :param str email_id: The id of the email.
        :param str subject: The subject of the email
        :return: VideoEmailPrompt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.respond_to_video_email_prompt_with_http_info(id, choice, **kwargs)  # noqa: E501
        else:
            (data) = self.respond_to_video_email_prompt_with_http_info(id, choice, **kwargs)  # noqa: E501
            return data

    def respond_to_video_email_prompt_with_http_info(self, id, choice, **kwargs):  # noqa: E501
        """Respond to a prompt  # noqa: E501

        Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.respond_to_video_email_prompt_with_http_info(id, choice, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the prompt. (required)
        :param str choice: The users' selection. Can be: WithVideo, WithEmail, Cancel, Restore, Reset, Manual (required)
        :param str video_id: The id of the video.
        :param str email_id: The id of the email.
        :param str subject: The subject of the email
        :return: VideoEmailPrompt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'choice', 'video_id', 'email_id', 'subject']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method respond_to_video_email_prompt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `respond_to_video_email_prompt`")  # noqa: E501
        # verify the required parameter 'choice' is set
        if ('choice' not in params or
                params['choice'] is None):
            raise ValueError("Missing the required parameter `choice` when calling `respond_to_video_email_prompt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'video_id' in params:
            form_params.append(('videoId', params['video_id']))  # noqa: E501
        if 'email_id' in params:
            form_params.append(('emailId', params['email_id']))  # noqa: E501
        if 'subject' in params:
            form_params.append(('subject', params['subject']))  # noqa: E501
        if 'choice' in params:
            form_params.append(('choice', params['choice']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/prompt/{id}/response', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VideoEmailPrompt',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_prompt_immediately(self, id, **kwargs):  # noqa: E501
        """  # noqa: E501

        Ignore send date and send the prompt now.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.send_prompt_immediately(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The Id of the prompt (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.send_prompt_immediately_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.send_prompt_immediately_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def send_prompt_immediately_with_http_info(self, id, **kwargs):  # noqa: E501
        """  # noqa: E501

        Ignore send date and send the prompt now.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.send_prompt_immediately_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The Id of the prompt (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_prompt_immediately" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `send_prompt_immediately`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/prompt/{id}/sendit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sync_prompt_subscriptions(self, **kwargs):  # noqa: E501
        """Syncs Campaigns and One to Ones Subscriptions for User  # noqa: E501

        Syncs Campaigns and One to Ones Subscriptions for User based on their profile information. The user must be a Prompt Subscriber.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sync_prompt_subscriptions(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool migrate: After syncing, migrate away from old campaigns.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sync_prompt_subscriptions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sync_prompt_subscriptions_with_http_info(**kwargs)  # noqa: E501
            return data

    def sync_prompt_subscriptions_with_http_info(self, **kwargs):  # noqa: E501
        """Syncs Campaigns and One to Ones Subscriptions for User  # noqa: E501

        Syncs Campaigns and One to Ones Subscriptions for User based on their profile information. The user must be a Prompt Subscriber.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sync_prompt_subscriptions_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool migrate: After syncing, migrate away from old campaigns.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['migrate']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_prompt_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'migrate' in params:
            form_params.append(('migrate', params['migrate']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/prompts/campaigns/sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_prompt(self, id, **kwargs):  # noqa: E501
        """Update Prompt  # noqa: E501

        Updates a Prompt  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_prompt(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The prompt's id (required)
        :param str send_mechanism: The mechanism for the prompt to be sent
        :param str facebook_message: The facebook message assigned to the prompt
        :param str twitter_message: The twitter message assigned to the prompt
        :param str video_id: The id of the video.
        :param str email_id: The id of the email.
        :param str subject: The subject of the email
        :param str reset_cache: The subject of the email
        :param str reset_email_content: The subject of the email
        :param str status: The status of the prompt
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_prompt_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_prompt_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_prompt_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update Prompt  # noqa: E501

        Updates a Prompt  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_prompt_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The prompt's id (required)
        :param str send_mechanism: The mechanism for the prompt to be sent
        :param str facebook_message: The facebook message assigned to the prompt
        :param str twitter_message: The twitter message assigned to the prompt
        :param str video_id: The id of the video.
        :param str email_id: The id of the email.
        :param str subject: The subject of the email
        :param str reset_cache: The subject of the email
        :param str reset_email_content: The subject of the email
        :param str status: The status of the prompt
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'send_mechanism', 'facebook_message', 'twitter_message', 'video_id', 'email_id', 'subject', 'reset_cache', 'reset_email_content', 'status']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_prompt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_prompt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'send_mechanism' in params:
            form_params.append(('sendMechanism', params['send_mechanism']))  # noqa: E501
        if 'facebook_message' in params:
            form_params.append(('facebookMessage', params['facebook_message']))  # noqa: E501
        if 'twitter_message' in params:
            form_params.append(('twitterMessage', params['twitter_message']))  # noqa: E501
        if 'video_id' in params:
            form_params.append(('videoId', params['video_id']))  # noqa: E501
        if 'email_id' in params:
            form_params.append(('emailId', params['email_id']))  # noqa: E501
        if 'subject' in params:
            form_params.append(('subject', params['subject']))  # noqa: E501
        if 'reset_cache' in params:
            form_params.append(('resetCache', params['reset_cache']))  # noqa: E501
        if 'reset_email_content' in params:
            form_params.append(('resetEmailContent', params['reset_email_content']))  # noqa: E501
        if 'status' in params:
            form_params.append(('status', params['status']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/prompts/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_prompt_bot(self, id, email_id, name, subject, content, contact_field_value_column, template_id, **kwargs):  # noqa: E501
        """Update Prompt Bot  # noqa: E501

        Updates a Prompt Bot's settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_prompt_bot(id, email_id, name, subject, content, contact_field_value_column, template_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The bot id. (required)
        :param str email_id: The default email to use. (required)
        :param str name: The name of the bot. (required)
        :param str subject: The subject of the default email. (required)
        :param str content: The content used in the default email. (required)
        :param str contact_field_value_column: The custom field value column with dates for this bot. (required)
        :param str template_id: The template used to create the email id. (required)
        :param str list_id: The list id to attach the bot to.
        :param str video_id: The video used in the default email.
        :param str end_date: The time frame to complete sending to the list.
        :param str status: The status of the bot.
        :return: PromptBot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_prompt_bot_with_http_info(id, email_id, name, subject, content, contact_field_value_column, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_prompt_bot_with_http_info(id, email_id, name, subject, content, contact_field_value_column, template_id, **kwargs)  # noqa: E501
            return data

    def update_prompt_bot_with_http_info(self, id, email_id, name, subject, content, contact_field_value_column, template_id, **kwargs):  # noqa: E501
        """Update Prompt Bot  # noqa: E501

        Updates a Prompt Bot's settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_prompt_bot_with_http_info(id, email_id, name, subject, content, contact_field_value_column, template_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The bot id. (required)
        :param str email_id: The default email to use. (required)
        :param str name: The name of the bot. (required)
        :param str subject: The subject of the default email. (required)
        :param str content: The content used in the default email. (required)
        :param str contact_field_value_column: The custom field value column with dates for this bot. (required)
        :param str template_id: The template used to create the email id. (required)
        :param str list_id: The list id to attach the bot to.
        :param str video_id: The video used in the default email.
        :param str end_date: The time frame to complete sending to the list.
        :param str status: The status of the bot.
        :return: PromptBot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'email_id', 'name', 'subject', 'content', 'contact_field_value_column', 'template_id', 'list_id', 'video_id', 'end_date', 'status']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_prompt_bot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_prompt_bot`")  # noqa: E501
        # verify the required parameter 'email_id' is set
        if ('email_id' not in params or
                params['email_id'] is None):
            raise ValueError("Missing the required parameter `email_id` when calling `update_prompt_bot`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `update_prompt_bot`")  # noqa: E501
        # verify the required parameter 'subject' is set
        if ('subject' not in params or
                params['subject'] is None):
            raise ValueError("Missing the required parameter `subject` when calling `update_prompt_bot`")  # noqa: E501
        # verify the required parameter 'content' is set
        if ('content' not in params or
                params['content'] is None):
            raise ValueError("Missing the required parameter `content` when calling `update_prompt_bot`")  # noqa: E501
        # verify the required parameter 'contact_field_value_column' is set
        if ('contact_field_value_column' not in params or
                params['contact_field_value_column'] is None):
            raise ValueError("Missing the required parameter `contact_field_value_column` when calling `update_prompt_bot`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `update_prompt_bot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'list_id' in params:
            form_params.append(('listId', params['list_id']))  # noqa: E501
        if 'email_id' in params:
            form_params.append(('emailId', params['email_id']))  # noqa: E501
        if 'video_id' in params:
            form_params.append(('videoId', params['video_id']))  # noqa: E501
        if 'end_date' in params:
            form_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'status' in params:
            form_params.append(('status', params['status']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'subject' in params:
            form_params.append(('subject', params['subject']))  # noqa: E501
        if 'content' in params:
            form_params.append(('content', params['content']))  # noqa: E501
        if 'contact_field_value_column' in params:
            form_params.append(('contactFieldValueColumn', params['contact_field_value_column']))  # noqa: E501
        if 'template_id' in params:
            form_params.append(('templateId', params['template_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/prompts/bots/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PromptBot',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_prompt_campaign(self, client_group_id, **kwargs):  # noqa: E501
        """Update Prompt Campaign  # noqa: E501

        Updates a Prompt Campaign's Settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_prompt_campaign(client_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_group_id: The client group of the campaign. (required)
        :param str branded_template_id: The template to use for branded feel emails.
        :param str personal_template_id: The template to use for personal feel emails.
        :param bool enabled: Set whether the user is able to start receiving prompts.
        :param str send_mechanism: The way to send the prompt
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_prompt_campaign_with_http_info(client_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_prompt_campaign_with_http_info(client_group_id, **kwargs)  # noqa: E501
            return data

    def update_prompt_campaign_with_http_info(self, client_group_id, **kwargs):  # noqa: E501
        """Update Prompt Campaign  # noqa: E501

        Updates a Prompt Campaign's Settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_prompt_campaign_with_http_info(client_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_group_id: The client group of the campaign. (required)
        :param str branded_template_id: The template to use for branded feel emails.
        :param str personal_template_id: The template to use for personal feel emails.
        :param bool enabled: Set whether the user is able to start receiving prompts.
        :param str send_mechanism: The way to send the prompt
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_group_id', 'branded_template_id', 'personal_template_id', 'enabled', 'send_mechanism']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_prompt_campaign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_group_id' is set
        if ('client_group_id' not in params or
                params['client_group_id'] is None):
            raise ValueError("Missing the required parameter `client_group_id` when calling `update_prompt_campaign`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_group_id' in params:
            path_params['clientGroupId'] = params['client_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'branded_template_id' in params:
            form_params.append(('brandedTemplateId', params['branded_template_id']))  # noqa: E501
        if 'personal_template_id' in params:
            form_params.append(('personalTemplateId', params['personal_template_id']))  # noqa: E501
        if 'enabled' in params:
            form_params.append(('enabled', params['enabled']))  # noqa: E501
        if 'send_mechanism' in params:
            form_params.append(('sendMechanism', params['send_mechanism']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/prompts/campaigns/{clientGroupId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_prompt_template(self, id, alternate_content_id, new_email_id, og_email_id, new_example_video_id, **kwargs):  # noqa: E501
        """Update Prompt Content  # noqa: E501

        Updates a Prompt Content  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_prompt_template(id, alternate_content_id, new_email_id, og_email_id, new_example_video_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The prompt's id (required)
        :param str alternate_content_id: The alternate content id (required)
        :param str new_email_id: The prompt's new email id (required)
        :param str og_email_id: The prompt's original email id (required)
        :param str new_example_video_id: The prompt's new tutorial video id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_prompt_template_with_http_info(id, alternate_content_id, new_email_id, og_email_id, new_example_video_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_prompt_template_with_http_info(id, alternate_content_id, new_email_id, og_email_id, new_example_video_id, **kwargs)  # noqa: E501
            return data

    def update_prompt_template_with_http_info(self, id, alternate_content_id, new_email_id, og_email_id, new_example_video_id, **kwargs):  # noqa: E501
        """Update Prompt Content  # noqa: E501

        Updates a Prompt Content  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_prompt_template_with_http_info(id, alternate_content_id, new_email_id, og_email_id, new_example_video_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The prompt's id (required)
        :param str alternate_content_id: The alternate content id (required)
        :param str new_email_id: The prompt's new email id (required)
        :param str og_email_id: The prompt's original email id (required)
        :param str new_example_video_id: The prompt's new tutorial video id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'alternate_content_id', 'new_email_id', 'og_email_id', 'new_example_video_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_prompt_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_prompt_template`")  # noqa: E501
        # verify the required parameter 'alternate_content_id' is set
        if ('alternate_content_id' not in params or
                params['alternate_content_id'] is None):
            raise ValueError("Missing the required parameter `alternate_content_id` when calling `update_prompt_template`")  # noqa: E501
        # verify the required parameter 'new_email_id' is set
        if ('new_email_id' not in params or
                params['new_email_id'] is None):
            raise ValueError("Missing the required parameter `new_email_id` when calling `update_prompt_template`")  # noqa: E501
        # verify the required parameter 'og_email_id' is set
        if ('og_email_id' not in params or
                params['og_email_id'] is None):
            raise ValueError("Missing the required parameter `og_email_id` when calling `update_prompt_template`")  # noqa: E501
        # verify the required parameter 'new_example_video_id' is set
        if ('new_example_video_id' not in params or
                params['new_example_video_id'] is None):
            raise ValueError("Missing the required parameter `new_example_video_id` when calling `update_prompt_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'alternate_content_id' in params:
            form_params.append(('alternateContentId', params['alternate_content_id']))  # noqa: E501
        if 'new_email_id' in params:
            form_params.append(('newEmailId', params['new_email_id']))  # noqa: E501
        if 'og_email_id' in params:
            form_params.append(('ogEmailId', params['og_email_id']))  # noqa: E501
        if 'new_example_video_id' in params:
            form_params.append(('newExampleVideoId', params['new_example_video_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/prompts/{id}/content', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
