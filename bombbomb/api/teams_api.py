# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.  # noqa: E501

    OpenAPI spec version: 2.0.831
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bombbomb.api_client import ApiClient


class TeamsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_team_member(self, team_id, **kwargs):  # noqa: E501
        """Add Member to Team  # noqa: E501

        Adds a member to a team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_team_member(team_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param bool admin: Set if the user is an admin of this team.
        :param str subgroup_ids: Subgroup IDs to add user to
        :param str user_email: The email of the member being added to the team.
        :param str user_id: The user id of the member being added to the team.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_team_member_with_http_info(team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_team_member_with_http_info(team_id, **kwargs)  # noqa: E501
            return data

    def add_team_member_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """Add Member to Team  # noqa: E501

        Adds a member to a team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_team_member_with_http_info(team_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param bool admin: Set if the user is an admin of this team.
        :param str subgroup_ids: Subgroup IDs to add user to
        :param str user_email: The email of the member being added to the team.
        :param str user_id: The user id of the member being added to the team.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'admin', 'subgroup_ids', 'user_email', 'user_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_team_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `add_team_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'admin' in params:
            form_params.append(('admin', params['admin']))  # noqa: E501
        if 'subgroup_ids' in params:
            form_params.append(('subgroupIds', params['subgroup_ids']))  # noqa: E501
        if 'user_email' in params:
            form_params.append(('userEmail', params['user_email']))  # noqa: E501
        if 'user_id' in params:
            form_params.append(('userId', params['user_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{teamId}/member', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_users(self, team_id, user_details, **kwargs):  # noqa: E501
        """Add users to group.  # noqa: E501

        Add a new or existing user to group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_users(team_id, user_details, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str user_details: Array of emails or objects containing details needed to create user (required)
        :param str send_welcome_email: Whether to send welcome email to new users
        :param str subgroup_ids: Subgroup IDs to add user to
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_users_with_http_info(team_id, user_details, **kwargs)  # noqa: E501
        else:
            (data) = self.add_users_with_http_info(team_id, user_details, **kwargs)  # noqa: E501
            return data

    def add_users_with_http_info(self, team_id, user_details, **kwargs):  # noqa: E501
        """Add users to group.  # noqa: E501

        Add a new or existing user to group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_users_with_http_info(team_id, user_details, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str user_details: Array of emails or objects containing details needed to create user (required)
        :param str send_welcome_email: Whether to send welcome email to new users
        :param str subgroup_ids: Subgroup IDs to add user to
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'user_details', 'send_welcome_email', 'subgroup_ids']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `add_users`")  # noqa: E501
        # verify the required parameter 'user_details' is set
        if ('user_details' not in params or
                params['user_details'] is None):
            raise ValueError("Missing the required parameter `user_details` when calling `add_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_details' in params:
            form_params.append(('userDetails', params['user_details']))  # noqa: E501
        if 'send_welcome_email' in params:
            form_params.append(('sendWelcomeEmail', params['send_welcome_email']))  # noqa: E501
        if 'subgroup_ids' in params:
            form_params.append(('subgroupIds', params['subgroup_ids']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{teamId}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_users_from_csv(self, team_id, csv_import_id, map, **kwargs):  # noqa: E501
        """Add members to group from CSV  # noqa: E501

        Imports members to a group from a given CSV ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_users_from_csv(team_id, csv_import_id, map, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str csv_import_id: ID of the CSV to import (required)
        :param str map: Object to use when mapping import to AccountCreateDetails. Key is property name on details, value is CSV column number. (required)
        :param str send_welcome_email: Whether to send welcome email to new users
        :param str subgroup_ids: Subgroup IDs to add user to
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_users_from_csv_with_http_info(team_id, csv_import_id, map, **kwargs)  # noqa: E501
        else:
            (data) = self.add_users_from_csv_with_http_info(team_id, csv_import_id, map, **kwargs)  # noqa: E501
            return data

    def add_users_from_csv_with_http_info(self, team_id, csv_import_id, map, **kwargs):  # noqa: E501
        """Add members to group from CSV  # noqa: E501

        Imports members to a group from a given CSV ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_users_from_csv_with_http_info(team_id, csv_import_id, map, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str csv_import_id: ID of the CSV to import (required)
        :param str map: Object to use when mapping import to AccountCreateDetails. Key is property name on details, value is CSV column number. (required)
        :param str send_welcome_email: Whether to send welcome email to new users
        :param str subgroup_ids: Subgroup IDs to add user to
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'csv_import_id', 'map', 'send_welcome_email', 'subgroup_ids']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_users_from_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `add_users_from_csv`")  # noqa: E501
        # verify the required parameter 'csv_import_id' is set
        if ('csv_import_id' not in params or
                params['csv_import_id'] is None):
            raise ValueError("Missing the required parameter `csv_import_id` when calling `add_users_from_csv`")  # noqa: E501
        # verify the required parameter 'map' is set
        if ('map' not in params or
                params['map'] is None):
            raise ValueError("Missing the required parameter `map` when calling `add_users_from_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'csv_import_id' in params:
            form_params.append(('csvImportId', params['csv_import_id']))  # noqa: E501
        if 'map' in params:
            form_params.append(('map', params['map']))  # noqa: E501
        if 'send_welcome_email' in params:
            form_params.append(('sendWelcomeEmail', params['send_welcome_email']))  # noqa: E501
        if 'subgroup_ids' in params:
            form_params.append(('subgroupIds', params['subgroup_ids']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{teamId}/members/csv', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cancel_jericho_send(self, jericho_id, **kwargs):  # noqa: E501
        """Cancel a Jericho Send  # noqa: E501

        Cancels a scheduled Jericho send from being sent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cancel_jericho_send(jericho_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str jericho_id: ID of the Jericho Job to cancel (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cancel_jericho_send_with_http_info(jericho_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_jericho_send_with_http_info(jericho_id, **kwargs)  # noqa: E501
            return data

    def cancel_jericho_send_with_http_info(self, jericho_id, **kwargs):  # noqa: E501
        """Cancel a Jericho Send  # noqa: E501

        Cancels a scheduled Jericho send from being sent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cancel_jericho_send_with_http_info(jericho_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str jericho_id: ID of the Jericho Job to cancel (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jericho_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_jericho_send" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jericho_id' is set
        if ('jericho_id' not in params or
                params['jericho_id'] is None):
            raise ValueError("Missing the required parameter `jericho_id` when calling `cancel_jericho_send`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'jericho_id' in params:
            path_params['jerichoId'] = params['jericho_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{teamId}/jericho/{jerichoId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_subteam(self, team_id, name, **kwargs):  # noqa: E501
        """Add a Subteam  # noqa: E501

        Adds a subteam to a parent team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_subteam(team_id, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str name: The subteam's name. (required)
        :return: TeamPublicRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_subteam_with_http_info(team_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_subteam_with_http_info(team_id, name, **kwargs)  # noqa: E501
            return data

    def create_subteam_with_http_info(self, team_id, name, **kwargs):  # noqa: E501
        """Add a Subteam  # noqa: E501

        Adds a subteam to a parent team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_subteam_with_http_info(team_id, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str name: The subteam's name. (required)
        :return: TeamPublicRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subteam" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `create_subteam`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_subteam`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{teamId}/subteam', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamPublicRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_subteam(self, team_id, subteam_id, **kwargs):  # noqa: E501
        """Delete Subteam  # noqa: E501

        Deletes a subteam  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_subteam(team_id, subteam_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str subteam_id: The subteam you wish to delete. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_subteam_with_http_info(team_id, subteam_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_subteam_with_http_info(team_id, subteam_id, **kwargs)  # noqa: E501
            return data

    def delete_subteam_with_http_info(self, team_id, subteam_id, **kwargs):  # noqa: E501
        """Delete Subteam  # noqa: E501

        Deletes a subteam  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_subteam_with_http_info(team_id, subteam_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str subteam_id: The subteam you wish to delete. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'subteam_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_subteam" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `delete_subteam`")  # noqa: E501
        # verify the required parameter 'subteam_id' is set
        if ('subteam_id' not in params or
                params['subteam_id'] is None):
            raise ValueError("Missing the required parameter `subteam_id` when calling `delete_subteam`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'subteam_id' in params:
            form_params.append(('subteamId', params['subteam_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{teamId}/subteam', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_client_group_associations(self, client_id, **kwargs):  # noqa: E501
        """Lists team associations  # noqa: E501

        Returns a collection of team associations for a given user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_client_group_associations(client_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_id: The clientId requesting group associations. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_all_client_group_associations_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_client_group_associations_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def get_all_client_group_associations_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Lists team associations  # noqa: E501

        Returns a collection of team associations for a given user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_client_group_associations_with_http_info(client_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_id: The clientId requesting group associations. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_client_group_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_all_client_group_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in params:
            query_params.append(('clientId', params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/associations/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_group_assets(self, asset_type, **kwargs):  # noqa: E501
        """Lists team assets  # noqa: E501

        Returns a collection of assets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_client_group_assets(asset_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str asset_type: The type of assets. (required)
        :param str team_id: The team containing the assets.
        :param str auto_tag_name: The auto tag name containing the assets.
        :param str page_size: The number of items to retrieve in a single db query.
        :param str page: Zero-based index of the page of data to retrieve from the db.
        :param str search: Search words.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_client_group_assets_with_http_info(asset_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_group_assets_with_http_info(asset_type, **kwargs)  # noqa: E501
            return data

    def get_client_group_assets_with_http_info(self, asset_type, **kwargs):  # noqa: E501
        """Lists team assets  # noqa: E501

        Returns a collection of assets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_client_group_assets_with_http_info(asset_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str asset_type: The type of assets. (required)
        :param str team_id: The team containing the assets.
        :param str auto_tag_name: The auto tag name containing the assets.
        :param str page_size: The number of items to retrieve in a single db query.
        :param str page: Zero-based index of the page of data to retrieve from the db.
        :param str search: Search words.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_type', 'team_id', 'auto_tag_name', 'page_size', 'page', 'search']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_group_assets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_type' is set
        if ('asset_type' not in params or
                params['asset_type'] is None):
            raise ValueError("Missing the required parameter `asset_type` when calling `get_client_group_assets`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'asset_type' in params:
            query_params.append(('assetType', params['asset_type']))  # noqa: E501
        if 'team_id' in params:
            query_params.append(('teamId', params['team_id']))  # noqa: E501
        if 'auto_tag_name' in params:
            query_params.append(('autoTagName', params['auto_tag_name']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/assets/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_group_statistics(self, team_id, **kwargs):  # noqa: E501
        """Get Team statistics  # noqa: E501

        Get top level statistic data for a Team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_client_group_statistics(team_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str member_status: The status of members to query for
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_client_group_statistics_with_http_info(team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_group_statistics_with_http_info(team_id, **kwargs)  # noqa: E501
            return data

    def get_client_group_statistics_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """Get Team statistics  # noqa: E501

        Get top level statistic data for a Team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_client_group_statistics_with_http_info(team_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str member_status: The status of members to query for
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'member_status']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_group_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `get_client_group_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []
        if 'member_status' in params:
            query_params.append(('memberStatus', params['member_status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{teamId}/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_jericho_sends(self, team_id, **kwargs):  # noqa: E501
        """List Jericho Sends  # noqa: E501

        Lists Jericho sends, both pending and sent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_jericho_sends(team_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team whose Jericho sends you wish to see. (required)
        :return: list[JerichoConfiguration]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_jericho_sends_with_http_info(team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_jericho_sends_with_http_info(team_id, **kwargs)  # noqa: E501
            return data

    def get_jericho_sends_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """List Jericho Sends  # noqa: E501

        Lists Jericho sends, both pending and sent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_jericho_sends_with_http_info(team_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team whose Jericho sends you wish to see. (required)
        :return: list[JerichoConfiguration]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_jericho_sends" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `get_jericho_sends`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{teamId}/jericho', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JerichoConfiguration]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_jericho_stats(self, jericho_id, team_id, **kwargs):  # noqa: E501
        """Gets Jericho performance statistics  # noqa: E501

        Returns an aggregate view of the performance of a Jericho send  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_jericho_stats(jericho_id, team_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str jericho_id: ID of the Jericho job (required)
        :param str team_id: ID of team through which Jericho was sent (required)
        :return: JerichoPerformance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_jericho_stats_with_http_info(jericho_id, team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_jericho_stats_with_http_info(jericho_id, team_id, **kwargs)  # noqa: E501
            return data

    def get_jericho_stats_with_http_info(self, jericho_id, team_id, **kwargs):  # noqa: E501
        """Gets Jericho performance statistics  # noqa: E501

        Returns an aggregate view of the performance of a Jericho send  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_jericho_stats_with_http_info(jericho_id, team_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str jericho_id: ID of the Jericho job (required)
        :param str team_id: ID of team through which Jericho was sent (required)
        :return: JerichoPerformance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jericho_id', 'team_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_jericho_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jericho_id' is set
        if ('jericho_id' not in params or
                params['jericho_id'] is None):
            raise ValueError("Missing the required parameter `jericho_id` when calling `get_jericho_stats`")  # noqa: E501
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `get_jericho_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'jericho_id' in params:
            path_params['jerichoId'] = params['jericho_id']  # noqa: E501
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{teamId}/jericho/{jerichoId}/performance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JerichoPerformance',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_paged_client_group_members(self, team_id, page_size, page, **kwargs):  # noqa: E501
        """List Team Members  # noqa: E501

        Get a paginated listing of Team members  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_paged_client_group_members(team_id, page_size, page, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str page_size: Amount of records to return in a page. (required)
        :param str page: The page to return. (required)
        :param str status: The status type to filter by.
        :param str search: Filter results with names that match the search term.
        :param str order_by: Key to order results by
        :param str order_direction: ASC or DESC
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_paged_client_group_members_with_http_info(team_id, page_size, page, **kwargs)  # noqa: E501
        else:
            (data) = self.get_paged_client_group_members_with_http_info(team_id, page_size, page, **kwargs)  # noqa: E501
            return data

    def get_paged_client_group_members_with_http_info(self, team_id, page_size, page, **kwargs):  # noqa: E501
        """List Team Members  # noqa: E501

        Get a paginated listing of Team members  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_paged_client_group_members_with_http_info(team_id, page_size, page, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str page_size: Amount of records to return in a page. (required)
        :param str page: The page to return. (required)
        :param str status: The status type to filter by.
        :param str search: Filter results with names that match the search term.
        :param str order_by: Key to order results by
        :param str order_direction: ASC or DESC
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'page_size', 'page', 'status', 'search', 'order_by', 'order_direction']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_paged_client_group_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `get_paged_client_group_members`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `get_paged_client_group_members`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_paged_client_group_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'order_direction' in params:
            query_params.append(('orderDirection', params['order_direction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{teamId}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_prompt_monthly_stats(self, month, year, **kwargs):  # noqa: E501
        """Jericho Monthly Stats  # noqa: E501

        Jericho Monthly Stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_prompt_monthly_stats(month, year, async=True)
        >>> result = thread.get()

        :param async bool
        :param str month: The month whose Jericho sends you wish to see. (required)
        :param str year: The year whose Jericho sends you wish to see. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_prompt_monthly_stats_with_http_info(month, year, **kwargs)  # noqa: E501
        else:
            (data) = self.get_prompt_monthly_stats_with_http_info(month, year, **kwargs)  # noqa: E501
            return data

    def get_prompt_monthly_stats_with_http_info(self, month, year, **kwargs):  # noqa: E501
        """Jericho Monthly Stats  # noqa: E501

        Jericho Monthly Stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_prompt_monthly_stats_with_http_info(month, year, async=True)
        >>> result = thread.get()

        :param async bool
        :param str month: The month whose Jericho sends you wish to see. (required)
        :param str year: The year whose Jericho sends you wish to see. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['month', 'year']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_prompt_monthly_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'month' is set
        if ('month' not in params or
                params['month'] is None):
            raise ValueError("Missing the required parameter `month` when calling `get_prompt_monthly_stats`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `get_prompt_monthly_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'month' in params:
            path_params['month'] = params['month']  # noqa: E501
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{month}/{year}/monthStats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_prompt_overview(self, **kwargs):  # noqa: E501
        """Get Prompt Overview  # noqa: E501

        Get Prompt Overview  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_prompt_overview(async=True)
        >>> result = thread.get()

        :param async bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_prompt_overview_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_prompt_overview_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_prompt_overview_with_http_info(self, **kwargs):  # noqa: E501
        """Get Prompt Overview  # noqa: E501

        Get Prompt Overview  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_prompt_overview_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_prompt_overview" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/promptOverview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subteams(self, team_id, **kwargs):  # noqa: E501
        """List Subteams  # noqa: E501

        Returns a collection of subteams for a parent team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_subteams(team_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :return: list[TeamPublicRepresentation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_subteams_with_http_info(team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subteams_with_http_info(team_id, **kwargs)  # noqa: E501
            return data

    def get_subteams_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """List Subteams  # noqa: E501

        Returns a collection of subteams for a parent team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_subteams_with_http_info(team_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :return: list[TeamPublicRepresentation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subteams" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `get_subteams`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/team/{teamId}/subteam', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TeamPublicRepresentation]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_prompt_aggregate_stats(self, client_group_id, **kwargs):  # noqa: E501
        """Get aggregate stats for campaigns  # noqa: E501

        Get all the campaigns aggregate stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_team_prompt_aggregate_stats(client_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_group_id: ID of the client group association (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_team_prompt_aggregate_stats_with_http_info(client_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_team_prompt_aggregate_stats_with_http_info(client_group_id, **kwargs)  # noqa: E501
            return data

    def get_team_prompt_aggregate_stats_with_http_info(self, client_group_id, **kwargs):  # noqa: E501
        """Get aggregate stats for campaigns  # noqa: E501

        Get all the campaigns aggregate stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_team_prompt_aggregate_stats_with_http_info(client_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_group_id: ID of the client group association (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_group_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_prompt_aggregate_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_group_id' is set
        if ('client_group_id' not in params or
                params['client_group_id'] is None):
            raise ValueError("Missing the required parameter `client_group_id` when calling `get_team_prompt_aggregate_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_group_id' in params:
            path_params['clientGroupId'] = params['client_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{clientGroupId}/campaign/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_prompt_campaigns(self, client_group_id, **kwargs):  # noqa: E501
        """Get campaigns for team  # noqa: E501

        Get campaigns for the team and their stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_team_prompt_campaigns(client_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_group_id: ID of the client group association (required)
        :param str search_term: The value to search for in prompt subject
        :param str current_page: The current page
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_team_prompt_campaigns_with_http_info(client_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_team_prompt_campaigns_with_http_info(client_group_id, **kwargs)  # noqa: E501
            return data

    def get_team_prompt_campaigns_with_http_info(self, client_group_id, **kwargs):  # noqa: E501
        """Get campaigns for team  # noqa: E501

        Get campaigns for the team and their stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_team_prompt_campaigns_with_http_info(client_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_group_id: ID of the client group association (required)
        :param str search_term: The value to search for in prompt subject
        :param str current_page: The current page
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_group_id', 'search_term', 'current_page']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_prompt_campaigns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_group_id' is set
        if ('client_group_id' not in params or
                params['client_group_id'] is None):
            raise ValueError("Missing the required parameter `client_group_id` when calling `get_team_prompt_campaigns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_group_id' in params:
            path_params['clientGroupId'] = params['client_group_id']  # noqa: E501

        query_params = []
        if 'search_term' in params:
            query_params.append(('searchTerm', params['search_term']))  # noqa: E501
        if 'current_page' in params:
            query_params.append(('currentPage', params['current_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{clientGroupId}/campaign', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invite_to_social_prompt_team(self, team_id, list_id, **kwargs):  # noqa: E501
        """Invite a list to join the admin&#39;s social prompt team  # noqa: E501

        Invite to Social Prompt Team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invite_to_social_prompt_team(team_id, list_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str list_id: List to invite to the social prompt team. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.invite_to_social_prompt_team_with_http_info(team_id, list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.invite_to_social_prompt_team_with_http_info(team_id, list_id, **kwargs)  # noqa: E501
            return data

    def invite_to_social_prompt_team_with_http_info(self, team_id, list_id, **kwargs):  # noqa: E501
        """Invite a list to join the admin&#39;s social prompt team  # noqa: E501

        Invite to Social Prompt Team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invite_to_social_prompt_team_with_http_info(team_id, list_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str list_id: List to invite to the social prompt team. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'list_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invite_to_social_prompt_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `invite_to_social_prompt_team`")  # noqa: E501
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling `invite_to_social_prompt_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'team_id' in params:
            form_params.append(('teamId', params['team_id']))  # noqa: E501
        if 'list_id' in params:
            form_params.append(('listId', params['list_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/teams/prompt/invite', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def queue_jericho_send(self, config, team_id, **kwargs):  # noqa: E501
        """Creates a Jericho send.  # noqa: E501

        Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.queue_jericho_send(config, team_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param JerichoConfiguration config: JSON representing a Jericho configuration (required)
        :param str team_id: The ID of the team. (required)
        :return: JerichoConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.queue_jericho_send_with_http_info(config, team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.queue_jericho_send_with_http_info(config, team_id, **kwargs)  # noqa: E501
            return data

    def queue_jericho_send_with_http_info(self, config, team_id, **kwargs):  # noqa: E501
        """Creates a Jericho send.  # noqa: E501

        Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.queue_jericho_send_with_http_info(config, team_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param JerichoConfiguration config: JSON representing a Jericho configuration (required)
        :param str team_id: The ID of the team. (required)
        :return: JerichoConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['config', 'team_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method queue_jericho_send" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'config' is set
        if ('config' not in params or
                params['config'] is None):
            raise ValueError("Missing the required parameter `config` when calling `queue_jericho_send`")  # noqa: E501
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `queue_jericho_send`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'config' in params:
            body_params = params['config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{teamId}/jericho', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JerichoConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_member_from_team(self, team_id, user_id, **kwargs):  # noqa: E501
        """Remove Member from Team  # noqa: E501

        Removes a member from a team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_member_from_team(team_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str user_id: The user id of the member being removed. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_member_from_team_with_http_info(team_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_member_from_team_with_http_info(team_id, user_id, **kwargs)  # noqa: E501
            return data

    def remove_member_from_team_with_http_info(self, team_id, user_id, **kwargs):  # noqa: E501
        """Remove Member from Team  # noqa: E501

        Removes a member from a team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_member_from_team_with_http_info(team_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str user_id: The user id of the member being removed. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'user_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_member_from_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `remove_member_from_team`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `remove_member_from_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{teamId}/member/{userId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resend_team_member_invitation(self, team_id, member_user_id, **kwargs):  # noqa: E501
        """Resend invite  # noqa: E501

        Resend invitation to a member of a team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resend_team_member_invitation(team_id, member_user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str member_user_id: The user id of the member being resent an invitation. (required)
        :return: TeamPublicRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resend_team_member_invitation_with_http_info(team_id, member_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resend_team_member_invitation_with_http_info(team_id, member_user_id, **kwargs)  # noqa: E501
            return data

    def resend_team_member_invitation_with_http_info(self, team_id, member_user_id, **kwargs):  # noqa: E501
        """Resend invite  # noqa: E501

        Resend invitation to a member of a team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resend_team_member_invitation_with_http_info(team_id, member_user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str member_user_id: The user id of the member being resent an invitation. (required)
        :return: TeamPublicRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'member_user_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resend_team_member_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `resend_team_member_invitation`")  # noqa: E501
        # verify the required parameter 'member_user_id' is set
        if ('member_user_id' not in params or
                params['member_user_id'] is None):
            raise ValueError("Missing the required parameter `member_user_id` when calling `resend_team_member_invitation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501
        if 'member_user_id' in params:
            path_params['memberUserId'] = params['member_user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{teamId}/{memberUserId}/rewelcome', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamPublicRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_jericho_prompt_send(self, team_id, jericho_id, **kwargs):  # noqa: E501
        """Updates the Jericho Prompt Settings  # noqa: E501

        Updates the prompt settings based on the original email id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_jericho_prompt_send(team_id, jericho_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str jericho_id: ID of the Jericho job (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_jericho_prompt_send_with_http_info(team_id, jericho_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_jericho_prompt_send_with_http_info(team_id, jericho_id, **kwargs)  # noqa: E501
            return data

    def update_jericho_prompt_send_with_http_info(self, team_id, jericho_id, **kwargs):  # noqa: E501
        """Updates the Jericho Prompt Settings  # noqa: E501

        Updates the prompt settings based on the original email id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_jericho_prompt_send_with_http_info(team_id, jericho_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str jericho_id: ID of the Jericho job (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'jericho_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_jericho_prompt_send" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `update_jericho_prompt_send`")  # noqa: E501
        # verify the required parameter 'jericho_id' is set
        if ('jericho_id' not in params or
                params['jericho_id'] is None):
            raise ValueError("Missing the required parameter `jericho_id` when calling `update_jericho_prompt_send`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501
        if 'jericho_id' in params:
            path_params['jerichoId'] = params['jericho_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{teamId}/jericho/{jerichoId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_team(self, team_id, **kwargs):  # noqa: E501
        """Update a team  # noqa: E501

        Update fields on a team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_team(team_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str name: The name of the team
        :param str state: The status of the login permissions
        :param bool subteams_can_add_members: Updates subteam member adding setting on group
        :return: TeamPublicRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_team_with_http_info(team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_team_with_http_info(team_id, **kwargs)  # noqa: E501
            return data

    def update_team_with_http_info(self, team_id, **kwargs):  # noqa: E501
        """Update a team  # noqa: E501

        Update fields on a team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_team_with_http_info(team_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str name: The name of the team
        :param str state: The status of the login permissions
        :param bool subteams_can_add_members: Updates subteam member adding setting on group
        :return: TeamPublicRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'name', 'state', 'subteams_can_add_members']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `update_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'state' in params:
            form_params.append(('state', params['state']))  # noqa: E501
        if 'subteams_can_add_members' in params:
            form_params.append(('subteamsCanAddMembers', params['subteams_can_add_members']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{teamId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamPublicRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_team_member(self, team_id, user_id, admin, **kwargs):  # noqa: E501
        """Update Member of Team  # noqa: E501

        Updates a member of a team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_team_member(team_id, user_id, admin, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str user_id: The user id of the member being added to the team. (required)
        :param bool admin: Set if the user is an admin of this team. (required)
        :param str permission_suite_id: Set if the user is an admin of this team.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_team_member_with_http_info(team_id, user_id, admin, **kwargs)  # noqa: E501
        else:
            (data) = self.update_team_member_with_http_info(team_id, user_id, admin, **kwargs)  # noqa: E501
            return data

    def update_team_member_with_http_info(self, team_id, user_id, admin, **kwargs):  # noqa: E501
        """Update Member of Team  # noqa: E501

        Updates a member of a team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_team_member_with_http_info(team_id, user_id, admin, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str user_id: The user id of the member being added to the team. (required)
        :param bool admin: Set if the user is an admin of this team. (required)
        :param str permission_suite_id: Set if the user is an admin of this team.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'user_id', 'admin', 'permission_suite_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_team_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `update_team_member`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `update_team_member`")  # noqa: E501
        # verify the required parameter 'admin' is set
        if ('admin' not in params or
                params['admin'] is None):
            raise ValueError("Missing the required parameter `admin` when calling `update_team_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_id' in params:
            form_params.append(('userId', params['user_id']))  # noqa: E501
        if 'admin' in params:
            form_params.append(('admin', params['admin']))  # noqa: E501
        if 'permission_suite_id' in params:
            form_params.append(('permissionSuiteId', params['permission_suite_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/team/{teamId}/member', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
