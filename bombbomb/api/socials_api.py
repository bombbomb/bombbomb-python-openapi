# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.  # noqa: E501

    OpenAPI spec version: 2.0.831
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bombbomb.api_client import ApiClient


class SocialsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_facebook_pages(self, **kwargs):  # noqa: E501
        """Gets facebook pages  # noqa: E501

        Gets facebook pages by client id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_facebook_pages(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_facebook_pages_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_facebook_pages_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_facebook_pages_with_http_info(self, **kwargs):  # noqa: E501
        """Gets facebook pages  # noqa: E501

        Gets facebook pages by client id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_facebook_pages_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_facebook_pages" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/socials/facebook/pages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_social_article_properties(self, email_id, social_content_id, **kwargs):  # noqa: E501
        """Gets the social email properties  # noqa: E501

        Gets the social email properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_social_article_properties(email_id, social_content_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email_id: This is the email Id for the email url (required)
        :param str social_content_id: This is the social content Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_social_article_properties_with_http_info(email_id, social_content_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_social_article_properties_with_http_info(email_id, social_content_id, **kwargs)  # noqa: E501
            return data

    def get_social_article_properties_with_http_info(self, email_id, social_content_id, **kwargs):  # noqa: E501
        """Gets the social email properties  # noqa: E501

        Gets the social email properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_social_article_properties_with_http_info(email_id, social_content_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email_id: This is the email Id for the email url (required)
        :param str social_content_id: This is the social content Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email_id', 'social_content_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_social_article_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email_id' is set
        if ('email_id' not in params or
                params['email_id'] is None):
            raise ValueError("Missing the required parameter `email_id` when calling `get_social_article_properties`")  # noqa: E501
        # verify the required parameter 'social_content_id' is set
        if ('social_content_id' not in params or
                params['social_content_id'] is None):
            raise ValueError("Missing the required parameter `social_content_id` when calling `get_social_article_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email_id' in params:
            query_params.append(('emailId', params['email_id']))  # noqa: E501
        if 'social_content_id' in params:
            query_params.append(('socialContentId', params['social_content_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/socials/properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_social_authorizations(self, **kwargs):  # noqa: E501
        """Get authorizations for all social integration  # noqa: E501

        Get authorizations and autoshares for all social integration and has redirect for user to login  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_social_authorizations(async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_group_id: ID of the client group association
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_social_authorizations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_social_authorizations_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_social_authorizations_with_http_info(self, **kwargs):  # noqa: E501
        """Get authorizations for all social integration  # noqa: E501

        Get authorizations and autoshares for all social integration and has redirect for user to login  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_social_authorizations_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_group_id: ID of the client group association
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_group_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_social_authorizations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_group_id' in params:
            query_params.append(('clientGroupId', params['client_group_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/socials/authorizations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_social_profile_properties(self, social_type, **kwargs):  # noqa: E501
        """Gets the profile properties  # noqa: E501

        Gets the social profile properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_social_profile_properties(social_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str social_type: The social type (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_social_profile_properties_with_http_info(social_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_social_profile_properties_with_http_info(social_type, **kwargs)  # noqa: E501
            return data

    def get_social_profile_properties_with_http_info(self, social_type, **kwargs):  # noqa: E501
        """Gets the profile properties  # noqa: E501

        Gets the social profile properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_social_profile_properties_with_http_info(social_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str social_type: The social type (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['social_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_social_profile_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'social_type' is set
        if ('social_type' not in params or
                params['social_type'] is None):
            raise ValueError("Missing the required parameter `social_type` when calling `get_social_profile_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'social_type' in params:
            query_params.append(('socialType', params['social_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/socials/profile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_social_stats(self, prompt_id, **kwargs):  # noqa: E501
        """Get social stats for a prompt  # noqa: E501

        Get social stats for a prompt by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_social_stats(prompt_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str prompt_id: ID of the prompt (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_social_stats_with_http_info(prompt_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_social_stats_with_http_info(prompt_id, **kwargs)  # noqa: E501
            return data

    def get_social_stats_with_http_info(self, prompt_id, **kwargs):  # noqa: E501
        """Get social stats for a prompt  # noqa: E501

        Get social stats for a prompt by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_social_stats_with_http_info(prompt_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str prompt_id: ID of the prompt (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prompt_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_social_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prompt_id' is set
        if ('prompt_id' not in params or
                params['prompt_id'] is None):
            raise ValueError("Missing the required parameter `prompt_id` when calling `get_social_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prompt_id' in params:
            path_params['promptId'] = params['prompt_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/socials/{promptId}/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_social_content(self, email_id, **kwargs):  # noqa: E501
        """Creates social content  # noqa: E501

        Creates social content for an email  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_social_content(email_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email_id: The email's id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_social_content_with_http_info(email_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_social_content_with_http_info(email_id, **kwargs)  # noqa: E501
            return data

    def post_social_content_with_http_info(self, email_id, **kwargs):  # noqa: E501
        """Creates social content  # noqa: E501

        Creates social content for an email  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_social_content_with_http_info(email_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email_id: The email's id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_social_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email_id' is set
        if ('email_id' not in params or
                params['email_id'] is None):
            raise ValueError("Missing the required parameter `email_id` when calling `post_social_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email_id' in params:
            form_params.append(('emailId', params['email_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/socials/content', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retry_social_send(self, prompt_id, **kwargs):  # noqa: E501
        """Sends social content  # noqa: E501

        Sends social content that failed for a user via their associated prompt  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.retry_social_send(prompt_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str prompt_id: The prompt id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.retry_social_send_with_http_info(prompt_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retry_social_send_with_http_info(prompt_id, **kwargs)  # noqa: E501
            return data

    def retry_social_send_with_http_info(self, prompt_id, **kwargs):  # noqa: E501
        """Sends social content  # noqa: E501

        Sends social content that failed for a user via their associated prompt  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.retry_social_send_with_http_info(prompt_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str prompt_id: The prompt id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prompt_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retry_social_send" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prompt_id' is set
        if ('prompt_id' not in params or
                params['prompt_id'] is None):
            raise ValueError("Missing the required parameter `prompt_id` when calling `retry_social_send`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'prompt_id' in params:
            form_params.append(('promptId', params['prompt_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/socials/send/retry', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_social(self, prompt_id, social_type, **kwargs):  # noqa: E501
        """Sends social content  # noqa: E501

        Sends social content for a user via their associated prompt  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.send_social(prompt_id, social_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str prompt_id: The prompt id (required)
        :param str social_type: The destination for social content (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.send_social_with_http_info(prompt_id, social_type, **kwargs)  # noqa: E501
        else:
            (data) = self.send_social_with_http_info(prompt_id, social_type, **kwargs)  # noqa: E501
            return data

    def send_social_with_http_info(self, prompt_id, social_type, **kwargs):  # noqa: E501
        """Sends social content  # noqa: E501

        Sends social content for a user via their associated prompt  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.send_social_with_http_info(prompt_id, social_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str prompt_id: The prompt id (required)
        :param str social_type: The destination for social content (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prompt_id', 'social_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_social" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prompt_id' is set
        if ('prompt_id' not in params or
                params['prompt_id'] is None):
            raise ValueError("Missing the required parameter `prompt_id` when calling `send_social`")  # noqa: E501
        # verify the required parameter 'social_type' is set
        if ('social_type' not in params or
                params['social_type'] is None):
            raise ValueError("Missing the required parameter `social_type` when calling `send_social`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'prompt_id' in params:
            form_params.append(('promptId', params['prompt_id']))  # noqa: E501
        if 'social_type' in params:
            form_params.append(('socialType', params['social_type']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/socials/send', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_group_send_mechanism(self, send_mechanism, client_group_id, **kwargs):  # noqa: E501
        """Gets the auto shares from the client group assoc id  # noqa: E501

        Gets the auto shares from the client group assoc id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_client_group_send_mechanism(send_mechanism, client_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str send_mechanism: The send mechanism for the prompt (required)
        :param str client_group_id: ID of the client group association (required)
        :param str enabled: Is the send mechanism enabled?
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_client_group_send_mechanism_with_http_info(send_mechanism, client_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_group_send_mechanism_with_http_info(send_mechanism, client_group_id, **kwargs)  # noqa: E501
            return data

    def update_client_group_send_mechanism_with_http_info(self, send_mechanism, client_group_id, **kwargs):  # noqa: E501
        """Gets the auto shares from the client group assoc id  # noqa: E501

        Gets the auto shares from the client group assoc id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_client_group_send_mechanism_with_http_info(send_mechanism, client_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str send_mechanism: The send mechanism for the prompt (required)
        :param str client_group_id: ID of the client group association (required)
        :param str enabled: Is the send mechanism enabled?
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['send_mechanism', 'client_group_id', 'enabled']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_group_send_mechanism" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'send_mechanism' is set
        if ('send_mechanism' not in params or
                params['send_mechanism'] is None):
            raise ValueError("Missing the required parameter `send_mechanism` when calling `update_client_group_send_mechanism`")  # noqa: E501
        # verify the required parameter 'client_group_id' is set
        if ('client_group_id' not in params or
                params['client_group_id'] is None):
            raise ValueError("Missing the required parameter `client_group_id` when calling `update_client_group_send_mechanism`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'send_mechanism' in params:
            form_params.append(('sendMechanism', params['send_mechanism']))  # noqa: E501
        if 'client_group_id' in params:
            form_params.append(('clientGroupId', params['client_group_id']))  # noqa: E501
        if 'enabled' in params:
            form_params.append(('enabled', params['enabled']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/socials/client/sendMechanism', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_groups_send_mechanism(self, send_mechanism, enabled, **kwargs):  # noqa: E501
        """Toggles the prompt campaigns in a users account  # noqa: E501

        Toggles the prompt campaigns in a users account for a social integrations on or off  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_client_groups_send_mechanism(send_mechanism, enabled, async=True)
        >>> result = thread.get()

        :param async bool
        :param str send_mechanism: The send mechanism for the prompt (required)
        :param str enabled: Is the send mechanism enabled? (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_client_groups_send_mechanism_with_http_info(send_mechanism, enabled, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_groups_send_mechanism_with_http_info(send_mechanism, enabled, **kwargs)  # noqa: E501
            return data

    def update_client_groups_send_mechanism_with_http_info(self, send_mechanism, enabled, **kwargs):  # noqa: E501
        """Toggles the prompt campaigns in a users account  # noqa: E501

        Toggles the prompt campaigns in a users account for a social integrations on or off  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_client_groups_send_mechanism_with_http_info(send_mechanism, enabled, async=True)
        >>> result = thread.get()

        :param async bool
        :param str send_mechanism: The send mechanism for the prompt (required)
        :param str enabled: Is the send mechanism enabled? (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['send_mechanism', 'enabled']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_groups_send_mechanism" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'send_mechanism' is set
        if ('send_mechanism' not in params or
                params['send_mechanism'] is None):
            raise ValueError("Missing the required parameter `send_mechanism` when calling `update_client_groups_send_mechanism`")  # noqa: E501
        # verify the required parameter 'enabled' is set
        if ('enabled' not in params or
                params['enabled'] is None):
            raise ValueError("Missing the required parameter `enabled` when calling `update_client_groups_send_mechanism`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'send_mechanism' in params:
            form_params.append(('sendMechanism', params['send_mechanism']))  # noqa: E501
        if 'enabled' in params:
            form_params.append(('enabled', params['enabled']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/socials/client/sendMechanisms', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_facebook_pages(self, page_ids, **kwargs):  # noqa: E501
        """Updates facebook page Ids  # noqa: E501

        Updates facebook page Ids to be sent to for prompts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_facebook_pages(page_ids, async=True)
        >>> result = thread.get()

        :param async bool
        :param str page_ids: Page Ids for the prompt (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_facebook_pages_with_http_info(page_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.update_facebook_pages_with_http_info(page_ids, **kwargs)  # noqa: E501
            return data

    def update_facebook_pages_with_http_info(self, page_ids, **kwargs):  # noqa: E501
        """Updates facebook page Ids  # noqa: E501

        Updates facebook page Ids to be sent to for prompts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_facebook_pages_with_http_info(page_ids, async=True)
        >>> result = thread.get()

        :param async bool
        :param str page_ids: Page Ids for the prompt (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_ids']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_facebook_pages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_ids' is set
        if ('page_ids' not in params or
                params['page_ids'] is None):
            raise ValueError("Missing the required parameter `page_ids` when calling `update_facebook_pages`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'page_ids' in params:
            form_params.append(('pageIds', params['page_ids']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/socials/facebook/pages', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_social_content(self, social_id, **kwargs):  # noqa: E501
        """Updates social content  # noqa: E501

        Updates social content for an email  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_social_content(social_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str social_id: The social id (required)
        :param str title: The title for the article
        :param str description: The article description
        :param str picture_url: The article picture url
        :param str suggested_message: The suggested message to use
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_social_content_with_http_info(social_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_social_content_with_http_info(social_id, **kwargs)  # noqa: E501
            return data

    def update_social_content_with_http_info(self, social_id, **kwargs):  # noqa: E501
        """Updates social content  # noqa: E501

        Updates social content for an email  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_social_content_with_http_info(social_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str social_id: The social id (required)
        :param str title: The title for the article
        :param str description: The article description
        :param str picture_url: The article picture url
        :param str suggested_message: The suggested message to use
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['social_id', 'title', 'description', 'picture_url', 'suggested_message']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_social_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'social_id' is set
        if ('social_id' not in params or
                params['social_id'] is None):
            raise ValueError("Missing the required parameter `social_id` when calling `update_social_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'social_id' in params:
            form_params.append(('socialId', params['social_id']))  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'picture_url' in params:
            form_params.append(('pictureUrl', params['picture_url']))  # noqa: E501
        if 'suggested_message' in params:
            form_params.append(('suggestedMessage', params['suggested_message']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/socials/content', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
