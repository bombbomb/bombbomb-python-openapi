# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.  # noqa: E501

    OpenAPI spec version: 2.0.831
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bombbomb.api_client import ApiClient


class AccountsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def account_details(self, **kwargs):  # noqa: E501
        """Get account details.  # noqa: E501

        Get the details of the user's account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.account_details(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.account_details_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_details_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_details_with_http_info(self, **kwargs):  # noqa: E501
        """Get account details.  # noqa: E501

        Get the details of the user's account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.account_details_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_details" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_account(self, team_id, first_name, last_name, email_address, company_name, phone, **kwargs):  # noqa: E501
        """Create Account  # noqa: E501

        Creates a new BombBomb account. This method is currently only available to paid seat admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_account(team_id, first_name, last_name, email_address, company_name, phone, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str first_name: First name of the user. (required)
        :param str last_name: Last name of the user. (required)
        :param str email_address: Email address of the user. (required)
        :param str company_name: Company of the user. (required)
        :param str phone: Phone number of the user. (required)
        :param str country: Country of the user.
        :param str industry: Industry of the user.
        :param str address: Street Address of the user.
        :param str city: City of the user.
        :param str postal_code: Postal/Zip code of the user.
        :param bool prevent_welcome_email: prevent an email with login credentials from being sent to the new account. must be set to 'true'
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_account_with_http_info(team_id, first_name, last_name, email_address, company_name, phone, **kwargs)  # noqa: E501
        else:
            (data) = self.create_account_with_http_info(team_id, first_name, last_name, email_address, company_name, phone, **kwargs)  # noqa: E501
            return data

    def create_account_with_http_info(self, team_id, first_name, last_name, email_address, company_name, phone, **kwargs):  # noqa: E501
        """Create Account  # noqa: E501

        Creates a new BombBomb account. This method is currently only available to paid seat admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_account_with_http_info(team_id, first_name, last_name, email_address, company_name, phone, async=True)
        >>> result = thread.get()

        :param async bool
        :param str team_id: The team id (required)
        :param str first_name: First name of the user. (required)
        :param str last_name: Last name of the user. (required)
        :param str email_address: Email address of the user. (required)
        :param str company_name: Company of the user. (required)
        :param str phone: Phone number of the user. (required)
        :param str country: Country of the user.
        :param str industry: Industry of the user.
        :param str address: Street Address of the user.
        :param str city: City of the user.
        :param str postal_code: Postal/Zip code of the user.
        :param bool prevent_welcome_email: prevent an email with login credentials from being sent to the new account. must be set to 'true'
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'first_name', 'last_name', 'email_address', 'company_name', 'phone', 'country', 'industry', 'address', 'city', 'postal_code', 'prevent_welcome_email']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `create_account`")  # noqa: E501
        # verify the required parameter 'first_name' is set
        if ('first_name' not in params or
                params['first_name'] is None):
            raise ValueError("Missing the required parameter `first_name` when calling `create_account`")  # noqa: E501
        # verify the required parameter 'last_name' is set
        if ('last_name' not in params or
                params['last_name'] is None):
            raise ValueError("Missing the required parameter `last_name` when calling `create_account`")  # noqa: E501
        # verify the required parameter 'email_address' is set
        if ('email_address' not in params or
                params['email_address'] is None):
            raise ValueError("Missing the required parameter `email_address` when calling `create_account`")  # noqa: E501
        # verify the required parameter 'company_name' is set
        if ('company_name' not in params or
                params['company_name'] is None):
            raise ValueError("Missing the required parameter `company_name` when calling `create_account`")  # noqa: E501
        # verify the required parameter 'phone' is set
        if ('phone' not in params or
                params['phone'] is None):
            raise ValueError("Missing the required parameter `phone` when calling `create_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'team_id' in params:
            form_params.append(('teamId', params['team_id']))  # noqa: E501
        if 'first_name' in params:
            form_params.append(('firstName', params['first_name']))  # noqa: E501
        if 'last_name' in params:
            form_params.append(('lastName', params['last_name']))  # noqa: E501
        if 'email_address' in params:
            form_params.append(('emailAddress', params['email_address']))  # noqa: E501
        if 'company_name' in params:
            form_params.append(('companyName', params['company_name']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'country' in params:
            form_params.append(('country', params['country']))  # noqa: E501
        if 'industry' in params:
            form_params.append(('industry', params['industry']))  # noqa: E501
        if 'address' in params:
            form_params.append(('address', params['address']))  # noqa: E501
        if 'city' in params:
            form_params.append(('city', params['city']))  # noqa: E501
        if 'postal_code' in params:
            form_params.append(('postalCode', params['postal_code']))  # noqa: E501
        if 'prevent_welcome_email' in params:
            form_params.append(('preventWelcomeEmail', params['prevent_welcome_email']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/accounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_statistics(self, **kwargs):  # noqa: E501
        """Get Client Statistics  # noqa: E501

        Gets general statics for a Client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_client_statistics(async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_id: Client ID of the account to retrieve. Defaults to yourself.
        :param bool refresh: Boolean for whether data returned should be from cache or not.
        :param str statistic_values: Array of data that should be returned, used exclusively for cacheless data
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_client_statistics_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_client_statistics_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_client_statistics_with_http_info(self, **kwargs):  # noqa: E501
        """Get Client Statistics  # noqa: E501

        Gets general statics for a Client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_client_statistics_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_id: Client ID of the account to retrieve. Defaults to yourself.
        :param bool refresh: Boolean for whether data returned should be from cache or not.
        :param str statistic_values: Array of data that should be returned, used exclusively for cacheless data
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'refresh', 'statistic_values']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_statistics" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in params:
            query_params.append(('clientId', params['client_id']))  # noqa: E501
        if 'refresh' in params:
            query_params.append(('refresh', params['refresh']))  # noqa: E501
        if 'statistic_values' in params:
            query_params.append(('statisticValues', params['statistic_values']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_country(self, **kwargs):  # noqa: E501
        """Gets user country  # noqa: E501

        Gets the users country  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_country(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_user_country_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_user_country_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_user_country_with_http_info(self, **kwargs):  # noqa: E501
        """Gets user country  # noqa: E501

        Gets the users country  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_country_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_country" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{clientId}/country', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_api_key(self, **kwargs):  # noqa: E501
        """Reset API key  # noqa: E501

        Resets the current user's API key and returns the new key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reset_api_key(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reset_api_key_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.reset_api_key_with_http_info(**kwargs)  # noqa: E501
            return data

    def reset_api_key_with_http_info(self, **kwargs):  # noqa: E501
        """Reset API key  # noqa: E501

        Resets the current user's API key and returns the new key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reset_api_key_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_api_key" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/apikey', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def subscription_purchase_allowed(self, **kwargs):  # noqa: E501
        """Check if subscription purchase allowed.  # noqa: E501

        Check whether the user can purchase a subscription.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.subscription_purchase_allowed(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.subscription_purchase_allowed_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.subscription_purchase_allowed_with_http_info(**kwargs)  # noqa: E501
            return data

    def subscription_purchase_allowed_with_http_info(self, **kwargs):  # noqa: E501
        """Check if subscription purchase allowed.  # noqa: E501

        Check whether the user can purchase a subscription.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.subscription_purchase_allowed_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscription_purchase_allowed" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/purchaseable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_profile_data(self, **kwargs):  # noqa: E501
        """Add profile information.  # noqa: E501

        Add profile information to this users account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_profile_data(async=True)
        >>> result = thread.get()

        :param async bool
        :param str profile_data: Profile field information for the account
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_profile_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_profile_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_profile_data_with_http_info(self, **kwargs):  # noqa: E501
        """Add profile information.  # noqa: E501

        Add profile information to this users account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_profile_data_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str profile_data: Profile field information for the account
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_profile_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'profile_data' in params:
            form_params.append(('profileData', params['profile_data']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/account/profile/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
