# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.  # noqa: E501

    OpenAPI spec version: 2.0.831
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bombbomb.api_client import ApiClient


class IntegrationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def connect_integration(self, code, **kwargs):  # noqa: E501
        """Activate an integration for a user.  # noqa: E501

        Provide the correct parameters to enable an integration. Required Parameters vary based on the desired          integration. Integrations requiring OAuth will provide the OAuth link that the user must be presented.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.connect_integration(code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str code: The identifier of the integration. (required)
        :param str key: The key value.
        :param str secret: The secret value.
        :param str token: The token value.
        :param str data: The data value as JSON.
        :param str overwrite: Boolean value to know whether or not to delete the integration if it already exists
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.connect_integration_with_http_info(code, **kwargs)  # noqa: E501
        else:
            (data) = self.connect_integration_with_http_info(code, **kwargs)  # noqa: E501
            return data

    def connect_integration_with_http_info(self, code, **kwargs):  # noqa: E501
        """Activate an integration for a user.  # noqa: E501

        Provide the correct parameters to enable an integration. Required Parameters vary based on the desired          integration. Integrations requiring OAuth will provide the OAuth link that the user must be presented.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.connect_integration_with_http_info(code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str code: The identifier of the integration. (required)
        :param str key: The key value.
        :param str secret: The secret value.
        :param str token: The token value.
        :param str data: The data value as JSON.
        :param str overwrite: Boolean value to know whether or not to delete the integration if it already exists
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'key', 'secret', 'token', 'data', 'overwrite']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connect_integration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `connect_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'code' in params:
            form_params.append(('code', params['code']))  # noqa: E501
        if 'key' in params:
            form_params.append(('key', params['key']))  # noqa: E501
        if 'secret' in params:
            form_params.append(('secret', params['secret']))  # noqa: E501
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'overwrite' in params:
            form_params.append(('overwrite', params['overwrite']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/integrations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_integration(self, **kwargs):  # noqa: E501
        """Remove an integration for a user.  # noqa: E501

        Remove an integration by providing the integration id or integration code. Only provide one of the             parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_integration(async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Integration ID
        :param str code: Integration Code
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_integration_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_integration_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_integration_with_http_info(self, **kwargs):  # noqa: E501
        """Remove an integration for a user.  # noqa: E501

        Remove an integration by providing the integration id or integration code. Only provide one of the             parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_integration_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Integration ID
        :param str code: Integration Code
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'code']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_integration" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'code' in params:
            form_params.append(('code', params['code']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/integrations', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_integration_health(self, code, **kwargs):  # noqa: E501
        """Get health for a given integration  # noqa: E501

        Get health for an integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_integration_health(code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str code: The integration code for which to retrieve the information from (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_integration_health_with_http_info(code, **kwargs)  # noqa: E501
        else:
            (data) = self.get_integration_health_with_http_info(code, **kwargs)  # noqa: E501
            return data

    def get_integration_health_with_http_info(self, code, **kwargs):  # noqa: E501
        """Get health for a given integration  # noqa: E501

        Get health for an integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_integration_health_with_http_info(code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str code: The integration code for which to retrieve the information from (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_integration_health" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `get_integration_health`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/health/{code}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_integration_page_components(self, integration_name, **kwargs):  # noqa: E501
        """Get page components for a given integration  # noqa: E501

        Get all page components for an integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_integration_page_components(integration_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str integration_name: The integration for which to retrieve HTML page components. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_integration_page_components_with_http_info(integration_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_integration_page_components_with_http_info(integration_name, **kwargs)  # noqa: E501
            return data

    def get_integration_page_components_with_http_info(self, integration_name, **kwargs):  # noqa: E501
        """Get page components for a given integration  # noqa: E501

        Get all page components for an integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_integration_page_components_with_http_info(integration_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str integration_name: The integration for which to retrieve HTML page components. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['integration_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_integration_page_components" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'integration_name' is set
        if ('integration_name' not in params or
                params['integration_name'] is None):
            raise ValueError("Missing the required parameter `integration_name` when calling `get_integration_page_components`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'integration_name' in params:
            query_params.append(('integration_name', params['integration_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/pageComponents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sync_users_integrated_lists(self, **kwargs):  # noqa: E501
        """Synchronize your integration list or lists.  # noqa: E501

        Synchronize your integration contact list with the service you are integrated with. If no integration code is provided, all integrations will be synchronized.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sync_users_integrated_lists(async=True)
        >>> result = thread.get()

        :param async bool
        :param str integration_id: The integration to sync lists for. All integrations will sync if nothing is provided.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sync_users_integrated_lists_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sync_users_integrated_lists_with_http_info(**kwargs)  # noqa: E501
            return data

    def sync_users_integrated_lists_with_http_info(self, **kwargs):  # noqa: E501
        """Synchronize your integration list or lists.  # noqa: E501

        Synchronize your integration contact list with the service you are integrated with. If no integration code is provided, all integrations will be synchronized.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sync_users_integrated_lists_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str integration_id: The integration to sync lists for. All integrations will sync if nothing is provided.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['integration_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_users_integrated_lists" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'integration_id' in params:
            query_params.append(('integration_id', params['integration_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BBOAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/sync', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
