# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.  # noqa: E501

    OpenAPI spec version: 2.0.831
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CurriculumUserProgress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_id': 'str',
        'curriculum_item_id': 'str',
        'curriculum_id': 'str',
        'completed_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'curriculum_item_id': 'curriculumItemId',
        'curriculum_id': 'curriculumId',
        'completed_date': 'completedDate'
    }

    def __init__(self, id=None, user_id=None, curriculum_item_id=None, curriculum_id=None, completed_date=None):  # noqa: E501
        """CurriculumUserProgress - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._user_id = None
        self._curriculum_item_id = None
        self._curriculum_id = None
        self._completed_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if curriculum_item_id is not None:
            self.curriculum_item_id = curriculum_item_id
        if curriculum_id is not None:
            self.curriculum_id = curriculum_id
        if completed_date is not None:
            self.completed_date = completed_date

    @property
    def id(self):
        """Gets the id of this CurriculumUserProgress.  # noqa: E501

        Id  # noqa: E501

        :return: The id of this CurriculumUserProgress.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CurriculumUserProgress.

        Id  # noqa: E501

        :param id: The id of this CurriculumUserProgress.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this CurriculumUserProgress.  # noqa: E501

        User Id  # noqa: E501

        :return: The user_id of this CurriculumUserProgress.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CurriculumUserProgress.

        User Id  # noqa: E501

        :param user_id: The user_id of this CurriculumUserProgress.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def curriculum_item_id(self):
        """Gets the curriculum_item_id of this CurriculumUserProgress.  # noqa: E501

        Curriculum Item Id  # noqa: E501

        :return: The curriculum_item_id of this CurriculumUserProgress.  # noqa: E501
        :rtype: str
        """
        return self._curriculum_item_id

    @curriculum_item_id.setter
    def curriculum_item_id(self, curriculum_item_id):
        """Sets the curriculum_item_id of this CurriculumUserProgress.

        Curriculum Item Id  # noqa: E501

        :param curriculum_item_id: The curriculum_item_id of this CurriculumUserProgress.  # noqa: E501
        :type: str
        """

        self._curriculum_item_id = curriculum_item_id

    @property
    def curriculum_id(self):
        """Gets the curriculum_id of this CurriculumUserProgress.  # noqa: E501

        Curriculum Id  # noqa: E501

        :return: The curriculum_id of this CurriculumUserProgress.  # noqa: E501
        :rtype: str
        """
        return self._curriculum_id

    @curriculum_id.setter
    def curriculum_id(self, curriculum_id):
        """Sets the curriculum_id of this CurriculumUserProgress.

        Curriculum Id  # noqa: E501

        :param curriculum_id: The curriculum_id of this CurriculumUserProgress.  # noqa: E501
        :type: str
        """

        self._curriculum_id = curriculum_id

    @property
    def completed_date(self):
        """Gets the completed_date of this CurriculumUserProgress.  # noqa: E501

        When the final email is scheduled to be sent  # noqa: E501

        :return: The completed_date of this CurriculumUserProgress.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_date

    @completed_date.setter
    def completed_date(self, completed_date):
        """Sets the completed_date of this CurriculumUserProgress.

        When the final email is scheduled to be sent  # noqa: E501

        :param completed_date: The completed_date of this CurriculumUserProgress.  # noqa: E501
        :type: datetime
        """

        self._completed_date = completed_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurriculumUserProgress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
