# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.  # noqa: E501

    OpenAPI spec version: 2.0.831
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OAuthClient(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'name': 'str',
        'client_secret': 'str',
        'grants_allowed': 'str',
        'owning_user_id': 'str',
        'redirect_uri': 'str'
    }

    attribute_map = {
        'identifier': 'identifier',
        'name': 'name',
        'client_secret': 'clientSecret',
        'grants_allowed': 'grantsAllowed',
        'owning_user_id': 'owningUserId',
        'redirect_uri': 'redirectUri'
    }

    def __init__(self, identifier=None, name=None, client_secret=None, grants_allowed=None, owning_user_id=None, redirect_uri=None):  # noqa: E501
        """OAuthClient - a model defined in Swagger"""  # noqa: E501

        self._identifier = None
        self._name = None
        self._client_secret = None
        self._grants_allowed = None
        self._owning_user_id = None
        self._redirect_uri = None
        self.discriminator = None

        if identifier is not None:
            self.identifier = identifier
        if name is not None:
            self.name = name
        if client_secret is not None:
            self.client_secret = client_secret
        if grants_allowed is not None:
            self.grants_allowed = grants_allowed
        if owning_user_id is not None:
            self.owning_user_id = owning_user_id
        if redirect_uri is not None:
            self.redirect_uri = redirect_uri

    @property
    def identifier(self):
        """Gets the identifier of this OAuthClient.  # noqa: E501

        The id of the OAuth Client  # noqa: E501

        :return: The identifier of this OAuthClient.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this OAuthClient.

        The id of the OAuth Client  # noqa: E501

        :param identifier: The identifier of this OAuthClient.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def name(self):
        """Gets the name of this OAuthClient.  # noqa: E501

        The user-facing name of the client. Eg. MyCrm  # noqa: E501

        :return: The name of this OAuthClient.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OAuthClient.

        The user-facing name of the client. Eg. MyCrm  # noqa: E501

        :param name: The name of this OAuthClient.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def client_secret(self):
        """Gets the client_secret of this OAuthClient.  # noqa: E501

        The secret supplied to the OAuth Application  # noqa: E501

        :return: The client_secret of this OAuthClient.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this OAuthClient.

        The secret supplied to the OAuth Application  # noqa: E501

        :param client_secret: The client_secret of this OAuthClient.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def grants_allowed(self):
        """Gets the grants_allowed of this OAuthClient.  # noqa: E501

        The grants allowed  # noqa: E501

        :return: The grants_allowed of this OAuthClient.  # noqa: E501
        :rtype: str
        """
        return self._grants_allowed

    @grants_allowed.setter
    def grants_allowed(self, grants_allowed):
        """Sets the grants_allowed of this OAuthClient.

        The grants allowed  # noqa: E501

        :param grants_allowed: The grants_allowed of this OAuthClient.  # noqa: E501
        :type: str
        """

        self._grants_allowed = grants_allowed

    @property
    def owning_user_id(self):
        """Gets the owning_user_id of this OAuthClient.  # noqa: E501

        The user who controls the OAuth App  # noqa: E501

        :return: The owning_user_id of this OAuthClient.  # noqa: E501
        :rtype: str
        """
        return self._owning_user_id

    @owning_user_id.setter
    def owning_user_id(self, owning_user_id):
        """Sets the owning_user_id of this OAuthClient.

        The user who controls the OAuth App  # noqa: E501

        :param owning_user_id: The owning_user_id of this OAuthClient.  # noqa: E501
        :type: str
        """

        self._owning_user_id = owning_user_id

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this OAuthClient.  # noqa: E501

        Where OAuth authorization sessions are returned to  # noqa: E501

        :return: The redirect_uri of this OAuthClient.  # noqa: E501
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this OAuthClient.

        Where OAuth authorization sessions are returned to  # noqa: E501

        :param redirect_uri: The redirect_uri of this OAuthClient.  # noqa: E501
        :type: str
        """

        self._redirect_uri = redirect_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuthClient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
