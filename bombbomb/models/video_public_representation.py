# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.  # noqa: E501

    OpenAPI spec version: 2.0.831
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VideoPublicRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_id': 'str',
        'status': 'str',
        'name': 'str',
        'description': 'str',
        'thumb_url': 'str',
        'video_urls': 'list[str]',
        'short_url': 'str',
        'height': 'int',
        'width': 'int',
        'upload_date': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'status': 'status',
        'name': 'name',
        'description': 'description',
        'thumb_url': 'thumbUrl',
        'video_urls': 'videoUrls',
        'short_url': 'shortUrl',
        'height': 'height',
        'width': 'width',
        'upload_date': 'uploadDate'
    }

    def __init__(self, id=None, user_id=None, status=None, name=None, description=None, thumb_url=None, video_urls=None, short_url=None, height=None, width=None, upload_date=None):  # noqa: E501
        """VideoPublicRepresentation - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._user_id = None
        self._status = None
        self._name = None
        self._description = None
        self._thumb_url = None
        self._video_urls = None
        self._short_url = None
        self._height = None
        self._width = None
        self._upload_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if status is not None:
            self.status = status
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if thumb_url is not None:
            self.thumb_url = thumb_url
        if video_urls is not None:
            self.video_urls = video_urls
        if short_url is not None:
            self.short_url = short_url
        if height is not None:
            self.height = height
        if width is not None:
            self.width = width
        if upload_date is not None:
            self.upload_date = upload_date

    @property
    def id(self):
        """Gets the id of this VideoPublicRepresentation.  # noqa: E501

        The id of the video  # noqa: E501

        :return: The id of this VideoPublicRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VideoPublicRepresentation.

        The id of the video  # noqa: E501

        :param id: The id of this VideoPublicRepresentation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this VideoPublicRepresentation.  # noqa: E501

        The is of the owning user  # noqa: E501

        :return: The user_id of this VideoPublicRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this VideoPublicRepresentation.

        The is of the owning user  # noqa: E501

        :param user_id: The user_id of this VideoPublicRepresentation.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def status(self):
        """Gets the status of this VideoPublicRepresentation.  # noqa: E501

        The status of the video  # noqa: E501

        :return: The status of this VideoPublicRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VideoPublicRepresentation.

        The status of the video  # noqa: E501

        :param status: The status of this VideoPublicRepresentation.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def name(self):
        """Gets the name of this VideoPublicRepresentation.  # noqa: E501

        The name of the video  # noqa: E501

        :return: The name of this VideoPublicRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VideoPublicRepresentation.

        The name of the video  # noqa: E501

        :param name: The name of this VideoPublicRepresentation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this VideoPublicRepresentation.  # noqa: E501

        A description of the video  # noqa: E501

        :return: The description of this VideoPublicRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VideoPublicRepresentation.

        A description of the video  # noqa: E501

        :param description: The description of this VideoPublicRepresentation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def thumb_url(self):
        """Gets the thumb_url of this VideoPublicRepresentation.  # noqa: E501

        The url of the thumbnail for the video  # noqa: E501

        :return: The thumb_url of this VideoPublicRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._thumb_url

    @thumb_url.setter
    def thumb_url(self, thumb_url):
        """Sets the thumb_url of this VideoPublicRepresentation.

        The url of the thumbnail for the video  # noqa: E501

        :param thumb_url: The thumb_url of this VideoPublicRepresentation.  # noqa: E501
        :type: str
        """

        self._thumb_url = thumb_url

    @property
    def video_urls(self):
        """Gets the video_urls of this VideoPublicRepresentation.  # noqa: E501

        Urls to different formats of the video  # noqa: E501

        :return: The video_urls of this VideoPublicRepresentation.  # noqa: E501
        :rtype: list[str]
        """
        return self._video_urls

    @video_urls.setter
    def video_urls(self, video_urls):
        """Sets the video_urls of this VideoPublicRepresentation.

        Urls to different formats of the video  # noqa: E501

        :param video_urls: The video_urls of this VideoPublicRepresentation.  # noqa: E501
        :type: list[str]
        """

        self._video_urls = video_urls

    @property
    def short_url(self):
        """Gets the short_url of this VideoPublicRepresentation.  # noqa: E501

        The url to use to link to the video  # noqa: E501

        :return: The short_url of this VideoPublicRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._short_url

    @short_url.setter
    def short_url(self, short_url):
        """Sets the short_url of this VideoPublicRepresentation.

        The url to use to link to the video  # noqa: E501

        :param short_url: The short_url of this VideoPublicRepresentation.  # noqa: E501
        :type: str
        """

        self._short_url = short_url

    @property
    def height(self):
        """Gets the height of this VideoPublicRepresentation.  # noqa: E501

        The height of the video in pixels  # noqa: E501

        :return: The height of this VideoPublicRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this VideoPublicRepresentation.

        The height of the video in pixels  # noqa: E501

        :param height: The height of this VideoPublicRepresentation.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def width(self):
        """Gets the width of this VideoPublicRepresentation.  # noqa: E501

        The width of the video in pixels  # noqa: E501

        :return: The width of this VideoPublicRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this VideoPublicRepresentation.

        The width of the video in pixels  # noqa: E501

        :param width: The width of this VideoPublicRepresentation.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def upload_date(self):
        """Gets the upload_date of this VideoPublicRepresentation.  # noqa: E501

        The date the video was uploaded  # noqa: E501

        :return: The upload_date of this VideoPublicRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._upload_date

    @upload_date.setter
    def upload_date(self, upload_date):
        """Sets the upload_date of this VideoPublicRepresentation.

        The date the video was uploaded  # noqa: E501

        :param upload_date: The upload_date of this VideoPublicRepresentation.  # noqa: E501
        :type: str
        """

        self._upload_date = upload_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoPublicRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
