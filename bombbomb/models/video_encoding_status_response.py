# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.  # noqa: E501

    OpenAPI spec version: 2.0.831
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VideoEncodingStatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_ready': 'bool',
        'is_failed': 'bool',
        'progress': 'int'
    }

    attribute_map = {
        'is_ready': 'isReady',
        'is_failed': 'isFailed',
        'progress': 'progress'
    }

    def __init__(self, is_ready=None, is_failed=None, progress=None):  # noqa: E501
        """VideoEncodingStatusResponse - a model defined in Swagger"""  # noqa: E501

        self._is_ready = None
        self._is_failed = None
        self._progress = None
        self.discriminator = None

        if is_ready is not None:
            self.is_ready = is_ready
        if is_failed is not None:
            self.is_failed = is_failed
        if progress is not None:
            self.progress = progress

    @property
    def is_ready(self):
        """Gets the is_ready of this VideoEncodingStatusResponse.  # noqa: E501

        Returns true if the video is done encoding and finalized.  # noqa: E501

        :return: The is_ready of this VideoEncodingStatusResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_ready

    @is_ready.setter
    def is_ready(self, is_ready):
        """Sets the is_ready of this VideoEncodingStatusResponse.

        Returns true if the video is done encoding and finalized.  # noqa: E501

        :param is_ready: The is_ready of this VideoEncodingStatusResponse.  # noqa: E501
        :type: bool
        """

        self._is_ready = is_ready

    @property
    def is_failed(self):
        """Gets the is_failed of this VideoEncodingStatusResponse.  # noqa: E501

        Returns true if the video encoding process failed.  # noqa: E501

        :return: The is_failed of this VideoEncodingStatusResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_failed

    @is_failed.setter
    def is_failed(self, is_failed):
        """Sets the is_failed of this VideoEncodingStatusResponse.

        Returns true if the video encoding process failed.  # noqa: E501

        :param is_failed: The is_failed of this VideoEncodingStatusResponse.  # noqa: E501
        :type: bool
        """

        self._is_failed = is_failed

    @property
    def progress(self):
        """Gets the progress of this VideoEncodingStatusResponse.  # noqa: E501

        0-100 value indicating progress of video encoding process.  # noqa: E501

        :return: The progress of this VideoEncodingStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this VideoEncodingStatusResponse.

        0-100 value indicating progress of video encoding process.  # noqa: E501

        :param progress: The progress of this VideoEncodingStatusResponse.  # noqa: E501
        :type: int
        """

        self._progress = progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoEncodingStatusResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
