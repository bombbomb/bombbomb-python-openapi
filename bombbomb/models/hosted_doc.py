# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.  # noqa: E501

    OpenAPI spec version: 2.0.831
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HostedDoc(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_id': 'str',
        'file_name': 'str',
        'short_url': 'str',
        'long_url': 'str',
        'upload_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'file_name': 'fileName',
        'short_url': 'shortUrl',
        'long_url': 'longUrl',
        'upload_date': 'uploadDate'
    }

    def __init__(self, id=None, user_id=None, file_name=None, short_url=None, long_url=None, upload_date=None):  # noqa: E501
        """HostedDoc - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._user_id = None
        self._file_name = None
        self._short_url = None
        self._long_url = None
        self._upload_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if file_name is not None:
            self.file_name = file_name
        if short_url is not None:
            self.short_url = short_url
        if long_url is not None:
            self.long_url = long_url
        if upload_date is not None:
            self.upload_date = upload_date

    @property
    def id(self):
        """Gets the id of this HostedDoc.  # noqa: E501

        The doc's id.  # noqa: E501

        :return: The id of this HostedDoc.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HostedDoc.

        The doc's id.  # noqa: E501

        :param id: The id of this HostedDoc.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this HostedDoc.  # noqa: E501

        The doc's owner.  # noqa: E501

        :return: The user_id of this HostedDoc.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this HostedDoc.

        The doc's owner.  # noqa: E501

        :param user_id: The user_id of this HostedDoc.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def file_name(self):
        """Gets the file_name of this HostedDoc.  # noqa: E501

        docs file name.  # noqa: E501

        :return: The file_name of this HostedDoc.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this HostedDoc.

        docs file name.  # noqa: E501

        :param file_name: The file_name of this HostedDoc.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def short_url(self):
        """Gets the short_url of this HostedDoc.  # noqa: E501

        The doc's short url.  # noqa: E501

        :return: The short_url of this HostedDoc.  # noqa: E501
        :rtype: str
        """
        return self._short_url

    @short_url.setter
    def short_url(self, short_url):
        """Sets the short_url of this HostedDoc.

        The doc's short url.  # noqa: E501

        :param short_url: The short_url of this HostedDoc.  # noqa: E501
        :type: str
        """

        self._short_url = short_url

    @property
    def long_url(self):
        """Gets the long_url of this HostedDoc.  # noqa: E501

        The doc's long url.  # noqa: E501

        :return: The long_url of this HostedDoc.  # noqa: E501
        :rtype: str
        """
        return self._long_url

    @long_url.setter
    def long_url(self, long_url):
        """Sets the long_url of this HostedDoc.

        The doc's long url.  # noqa: E501

        :param long_url: The long_url of this HostedDoc.  # noqa: E501
        :type: str
        """

        self._long_url = long_url

    @property
    def upload_date(self):
        """Gets the upload_date of this HostedDoc.  # noqa: E501

        The doc's upload date.  # noqa: E501

        :return: The upload_date of this HostedDoc.  # noqa: E501
        :rtype: datetime
        """
        return self._upload_date

    @upload_date.setter
    def upload_date(self, upload_date):
        """Sets the upload_date of this HostedDoc.

        The doc's upload date.  # noqa: E501

        :param upload_date: The upload_date of this HostedDoc.  # noqa: E501
        :type: datetime
        """

        self._upload_date = upload_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostedDoc):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
