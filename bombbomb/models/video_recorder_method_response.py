# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.  # noqa: E501

    OpenAPI spec version: 2.0.831
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VideoRecorderMethodResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'email': 'str',
        'client_id': 'str',
        'vid_id': 'str',
        'content': 'str',
        'width': 'int',
        'height': 'int',
        'https': 'bool'
    }

    attribute_map = {
        'user_id': 'user_id',
        'email': 'email',
        'client_id': 'client_id',
        'vid_id': 'vid_id',
        'content': 'content',
        'width': 'width',
        'height': 'height',
        'https': 'https'
    }

    def __init__(self, user_id=None, email=None, client_id=None, vid_id=None, content=None, width=None, height=None, https=None):  # noqa: E501
        """VideoRecorderMethodResponse - a model defined in Swagger"""  # noqa: E501

        self._user_id = None
        self._email = None
        self._client_id = None
        self._vid_id = None
        self._content = None
        self._width = None
        self._height = None
        self._https = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if email is not None:
            self.email = email
        if client_id is not None:
            self.client_id = client_id
        if vid_id is not None:
            self.vid_id = vid_id
        if content is not None:
            self.content = content
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if https is not None:
            self.https = https

    @property
    def user_id(self):
        """Gets the user_id of this VideoRecorderMethodResponse.  # noqa: E501

        The id of the user for whom this video will be recorded  # noqa: E501

        :return: The user_id of this VideoRecorderMethodResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this VideoRecorderMethodResponse.

        The id of the user for whom this video will be recorded  # noqa: E501

        :param user_id: The user_id of this VideoRecorderMethodResponse.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def email(self):
        """Gets the email of this VideoRecorderMethodResponse.  # noqa: E501

        The email address of the user for whom this video will be recorded  # noqa: E501

        :return: The email of this VideoRecorderMethodResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this VideoRecorderMethodResponse.

        The email address of the user for whom this video will be recorded  # noqa: E501

        :param email: The email of this VideoRecorderMethodResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def client_id(self):
        """Gets the client_id of this VideoRecorderMethodResponse.  # noqa: E501

        The client_id of the user for whom this video will be recorded  # noqa: E501

        :return: The client_id of this VideoRecorderMethodResponse.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this VideoRecorderMethodResponse.

        The client_id of the user for whom this video will be recorded  # noqa: E501

        :param client_id: The client_id of this VideoRecorderMethodResponse.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def vid_id(self):
        """Gets the vid_id of this VideoRecorderMethodResponse.  # noqa: E501

        The id of the video that will be recorded  # noqa: E501

        :return: The vid_id of this VideoRecorderMethodResponse.  # noqa: E501
        :rtype: str
        """
        return self._vid_id

    @vid_id.setter
    def vid_id(self, vid_id):
        """Sets the vid_id of this VideoRecorderMethodResponse.

        The id of the video that will be recorded  # noqa: E501

        :param vid_id: The vid_id of this VideoRecorderMethodResponse.  # noqa: E501
        :type: str
        """

        self._vid_id = vid_id

    @property
    def content(self):
        """Gets the content of this VideoRecorderMethodResponse.  # noqa: E501

        An HTML blob that displays a video recorder  # noqa: E501

        :return: The content of this VideoRecorderMethodResponse.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this VideoRecorderMethodResponse.

        An HTML blob that displays a video recorder  # noqa: E501

        :param content: The content of this VideoRecorderMethodResponse.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def width(self):
        """Gets the width of this VideoRecorderMethodResponse.  # noqa: E501

        The width of the video recorder  # noqa: E501

        :return: The width of this VideoRecorderMethodResponse.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this VideoRecorderMethodResponse.

        The width of the video recorder  # noqa: E501

        :param width: The width of this VideoRecorderMethodResponse.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this VideoRecorderMethodResponse.  # noqa: E501

        the Height of the video recorder  # noqa: E501

        :return: The height of this VideoRecorderMethodResponse.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this VideoRecorderMethodResponse.

        the Height of the video recorder  # noqa: E501

        :param height: The height of this VideoRecorderMethodResponse.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def https(self):
        """Gets the https of this VideoRecorderMethodResponse.  # noqa: E501

        Whether communication from the recorder will be handled via HTTPS (always true)  # noqa: E501

        :return: The https of this VideoRecorderMethodResponse.  # noqa: E501
        :rtype: bool
        """
        return self._https

    @https.setter
    def https(self, https):
        """Sets the https of this VideoRecorderMethodResponse.

        Whether communication from the recorder will be handled via HTTPS (always true)  # noqa: E501

        :param https: The https of this VideoRecorderMethodResponse.  # noqa: E501
        :type: bool
        """

        self._https = https

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoRecorderMethodResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
