# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.  # noqa: E501

    OpenAPI spec version: 2.0.831
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bombbomb.models.curriculum_user_progress import CurriculumUserProgress  # noqa: F401,E501


class Curriculum(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'html_intro': 'str',
        'img_url': 'str',
        'item_count': 'int',
        'render_as': 'str',
        'visible_to_all_users': 'bool',
        'progress': 'list[CurriculumUserProgress]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'html_intro': 'htmlIntro',
        'img_url': 'imgUrl',
        'item_count': 'itemCount',
        'render_as': 'renderAs',
        'visible_to_all_users': 'visibleToAllUsers',
        'progress': 'progress'
    }

    def __init__(self, id=None, name=None, html_intro=None, img_url=None, item_count=None, render_as=None, visible_to_all_users=None, progress=None):  # noqa: E501
        """Curriculum - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._html_intro = None
        self._img_url = None
        self._item_count = None
        self._render_as = None
        self._visible_to_all_users = None
        self._progress = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if html_intro is not None:
            self.html_intro = html_intro
        if img_url is not None:
            self.img_url = img_url
        if item_count is not None:
            self.item_count = item_count
        if render_as is not None:
            self.render_as = render_as
        if visible_to_all_users is not None:
            self.visible_to_all_users = visible_to_all_users
        if progress is not None:
            self.progress = progress

    @property
    def id(self):
        """Gets the id of this Curriculum.  # noqa: E501

        Id  # noqa: E501

        :return: The id of this Curriculum.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Curriculum.

        Id  # noqa: E501

        :param id: The id of this Curriculum.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Curriculum.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this Curriculum.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Curriculum.

        Name  # noqa: E501

        :param name: The name of this Curriculum.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def html_intro(self):
        """Gets the html_intro of this Curriculum.  # noqa: E501

        HTML formatted intro  # noqa: E501

        :return: The html_intro of this Curriculum.  # noqa: E501
        :rtype: str
        """
        return self._html_intro

    @html_intro.setter
    def html_intro(self, html_intro):
        """Sets the html_intro of this Curriculum.

        HTML formatted intro  # noqa: E501

        :param html_intro: The html_intro of this Curriculum.  # noqa: E501
        :type: str
        """

        self._html_intro = html_intro

    @property
    def img_url(self):
        """Gets the img_url of this Curriculum.  # noqa: E501

        URI of header image  # noqa: E501

        :return: The img_url of this Curriculum.  # noqa: E501
        :rtype: str
        """
        return self._img_url

    @img_url.setter
    def img_url(self, img_url):
        """Sets the img_url of this Curriculum.

        URI of header image  # noqa: E501

        :param img_url: The img_url of this Curriculum.  # noqa: E501
        :type: str
        """

        self._img_url = img_url

    @property
    def item_count(self):
        """Gets the item_count of this Curriculum.  # noqa: E501

        Number of curriculum items  # noqa: E501

        :return: The item_count of this Curriculum.  # noqa: E501
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this Curriculum.

        Number of curriculum items  # noqa: E501

        :param item_count: The item_count of this Curriculum.  # noqa: E501
        :type: int
        """

        self._item_count = item_count

    @property
    def render_as(self):
        """Gets the render_as of this Curriculum.  # noqa: E501

        Render method for curriculum  # noqa: E501

        :return: The render_as of this Curriculum.  # noqa: E501
        :rtype: str
        """
        return self._render_as

    @render_as.setter
    def render_as(self, render_as):
        """Sets the render_as of this Curriculum.

        Render method for curriculum  # noqa: E501

        :param render_as: The render_as of this Curriculum.  # noqa: E501
        :type: str
        """

        self._render_as = render_as

    @property
    def visible_to_all_users(self):
        """Gets the visible_to_all_users of this Curriculum.  # noqa: E501

        Globally visible  # noqa: E501

        :return: The visible_to_all_users of this Curriculum.  # noqa: E501
        :rtype: bool
        """
        return self._visible_to_all_users

    @visible_to_all_users.setter
    def visible_to_all_users(self, visible_to_all_users):
        """Sets the visible_to_all_users of this Curriculum.

        Globally visible  # noqa: E501

        :param visible_to_all_users: The visible_to_all_users of this Curriculum.  # noqa: E501
        :type: bool
        """

        self._visible_to_all_users = visible_to_all_users

    @property
    def progress(self):
        """Gets the progress of this Curriculum.  # noqa: E501

        Collection of User Progress for Curriculum  # noqa: E501

        :return: The progress of this Curriculum.  # noqa: E501
        :rtype: list[CurriculumUserProgress]
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Curriculum.

        Collection of User Progress for Curriculum  # noqa: E501

        :param progress: The progress of this Curriculum.  # noqa: E501
        :type: list[CurriculumUserProgress]
        """

        self._progress = progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Curriculum):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
